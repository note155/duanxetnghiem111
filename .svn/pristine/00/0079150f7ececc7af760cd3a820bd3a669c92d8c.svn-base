@page "/XetDuyetDXN/{id:int}"
@rendermode InteractiveWebAssembly
@layout AdminLayout
 @inject NavigationManager navigation;
@attribute [Authorize]
<div class="patient-registration-container">
<div class="patient-info">
    <h2>Thông tin bệnh nhân</h2>
    <div class="info">
        <p><strong>Họ tên:</strong> @user.Hoten</p>
            <p><strong>Ngày sinh:</strong> @user.Ngaysinh.ToString("dd/MM/yyyy")</p>
        <p><strong>Số điện thoại:</strong> @user.SDT</p>
            <p><strong>Địa chỉ:</strong> @user.Diachi / @user.CapXa / @user.CapHuyen / Thành phố Huế</p>
        <p><strong>Email:</strong> @user.Email</p>
            <p><strong>Giới tính:</strong> @gioitinh(@user.Gioitinh)</p>
    </div>
</div>

<div class="test-registration-form">
    <h2>Thông tin đơn đăng ký xét nghiệm</h2>
        <div style="background-color:yellow;color:black" class="btn btn-primary btn-lg disabled">  <strong>Trạng Thái: </strong>@Input.Trangthai</div>
    <EditForm Model="Input" method="post" OnValidSubmit="add" FormName="register" class="profile-form">
        <DataAnnotationsValidator />
        <hr />

        @if (err.Any())
        {
            <div class="alert alert-danger" role="alert">
                @foreach (var error in err)
                {
                    <p>@error</p>
                }
            </div>
        }
        <div class="form-group">
            <label for="ngaytaodon">Ngày tạo đơn</label>
            <InputDate @bind-Value="Input.ngaytaodon" class="form-control" id="Ngaytaodon" readonly />
            <ValidationMessage For="() => Input.ngaytaodon" class="text-danger" />
        </div>
            <div class="form-group">
                <label for="BacSiId">Nhân viên lấy máu</label>
                <input type="text" @bind="searchQuery" @oninput="OnSearchQueryChanged" list="staffList" placeholder="Tìm kiếm nhân viên" class="form-control" />
                <datalist id="staffList">
                    @foreach (var bs in FilteredStaffMembers)
                    {
                        <option value="@($"{bs.Id} - {bs.Hoten} - {bs.Chucvu}")" data-id="@bs.Id"></option>
                    }
                </datalist>
                <input type="hidden" @bind="idbs" />
            </div>




            @if (SelectedDoctor != null)
            {
                <div class="doctor-info">
                    <div class="doctor-details">
                        <h3>Thông tin bác sĩ:</h3>
                        <p><strong>Họ tên:</strong> @SelectedDoctor.Hoten</p>
                        <p><strong>Chức vụ:</strong> @SelectedDoctor.Chucvu</p>
                        <p><strong>Số điện thoại:</strong> @SelectedDoctor.SDT</p>
                        <p><strong>Email:</strong> @SelectedDoctor.Email</p>
                    </div>
                    <div class="doctor-image">
                        <img src="@SelectedDoctor.Anh" alt="Ảnh bác sĩ">
                    </div>
                </div>
                <div class="doctor-info">
                    <div class="doctor-details">
                        <h3>Các Đơn Đã Nhận trong ngày :@Input.Ngaydat.Date.ToString("dd/MM/yyyy") / Số Đơn: @AllDXN.Count</h3>
                        @if (AllDXN.Count != 0)
                        {
                            @foreach (var dx in AllDXN.GroupBy(g => g.User?.CapXa))
                            {
                                <h5>@dx.Key</h5>
                                @foreach (var dxn in dx)
                                {
                                    <p><a href="/XacNhanLayMau/@dxn.Id">Id: @dxn.Id -- Giờ lấy: @dxn.giolaymau -- Ngày lấy: @dxn.Ngaydat.ToString("dd/MM/yyyy")</a></p>
                                }
                            }
                        }
                        else
                        {
                            <p>Không có đơn nào trong ngày : :@Input.Ngaydat.Date.ToString("dd/MM/yyyy")</p>
                        }
                    </div>
                    
                </div>
            }
        <div class="form-group">
            <label for="Ngaydat">Ngày Lấy Máu</label>
                <InputDate @bind-Value="Input.Ngaydat" class="form-control" id="Ngaydat" />
            <ValidationMessage For="() => Input.Ngaydat" class="text-danger" />
        </div>
        <div class="form-group">
            <label for="giolaymau">Giờ lấy máu</label>
                <InputSelect id="giolaymau" @bind-Value="Input.giolaymau" class="form-control">
                    @if (timeList.Any())
                    {
                        @foreach (var time in timeList)
                        {
                            <option value="@time">@time</option>
                        }
                    }
                </InputSelect>
        </div>
        <div class="form-group">
            <label for="ghiChu">Ghi chú của bệnh nhân</label>
            <InputTextArea @bind-Value="Input.ghiChu" class="form-control" id="ghiChu" />
            <ValidationMessage For="() => Input.ghiChu" class="text-danger" />
        </div>
            @if (gxndachon.Count != 0)
            {
                <div class="doctor-info">
                    <div class="selected-packages-header">
                        <h3>Các gói đã chọn:</h3>
                    </div>
                    <div class="selected-packages">
                        @foreach (var bs in gxndachon)
                        {
                            <div class="package">
                                <div class="package-content">
                                    <p><strong>Tên Gói:</strong> @bs.TenGoi</p>
                                    <div class="price">Giá: @bs.Gia VND</div>
                                </div>
                       
                            </div>
                        }
                    </div>
                    <div class="total-mobile">
                        <p>Tổng tiền: <span class="total">@tongtien VND</span></p>
                    </div>
                </div>

            }
       
            <a href="/ListDXN"><button style="background-color:red" class="btn btn-primary"> Hủy </button></a>
            <button type="submit" class="btn btn-primary">Duyệt</button>
            
        </EditForm>
    </div>
</div>

@code {
    private List<string> err = new List<string>();
    private User user = new User();
    public List<GoiXetNghiem> allGXN { get; set; } = new();
    public List<BacSi> AllBS { get; set; } = new();
    private List<BacSi> FilteredStaffMembers { get; set; } = new();
    private string searchQuery = "";
    public List<DonXetNghiem> AllDXN { get; set; } = new();
    public List<DonXetNghiem> DXN { get; set; } = new();
    private BacSi SelectedDoctor = null;
    int valor,idbs;
    int valorgxn,idgxn;
    public List<GoiXetNghiem> gxndachon { get; set; } = new();
    public List<DXNandGXN> dxn { get; set; } = new();
    public long tongtien = 0;
    private List<GoiXetNghiem> previousGxndachon = new List<GoiXetNghiem>();
    List<string> timeList = new();
    [SupplyParameterFromForm]
    public DonXetNghiem Input { get; set; } = new();

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await checkbs();
        Input = await DXNservice.getbyid(id);
        user = await Usertservice.getuserbyid(Input.UserId);
        allGXN = await GXNservice.getallAsync();
        AllBS = await bacsiservice.getallAsync();
        FilteredStaffMembers = AllBS;
        FilterStaffMembers();
        dxn = await DXNservice.getallGXNAsync(id);
        DXN = await DXNservice.getallAsync();
        loadgxndachon();
        timeList = GenerateTimeList();
    }
    static List<string> GenerateTimeList()
    {
        List<string> timeList = new List<string>();

        // Tạo danh sách thời gian từ 05:30 đến 21:00
        TimeSpan time = TimeSpan.FromHours(5.5); // 05:30
        TimeSpan endTime = TimeSpan.FromHours(20.8); // 21:00
        while (time <= endTime)
        {
            string startTime = time.ToString(@"hh\:mm");
            string endTimeString = time.Add(TimeSpan.FromMinutes(15)).ToString(@"hh\:mm");
            string timeRange = $"{startTime} - {endTimeString}";
            timeList.Add(timeRange);
            time = time.Add(TimeSpan.FromMinutes(15)); // Tăng thêm 15 phút
        }

        return timeList;
    }
    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        FilterStaffMembers();
        string[] numbers = searchQuery.Split('-');

        if (numbers.Length >= 3)
        {
            LoadBSInfo(int.Parse(numbers[0]));
        }
    }
    public async Task checkbs()
    {
        var authState = await checkbss.GetAuthenticationStateAsync();
        var UserName = authState.User.Identity.Name;
        var bs = await bacsiservice.getbyemail(UserName);
        if (bs == null)
        {
            navigation.NavigateTo("/err");
        }
    }
    private void FilterStaffMembers()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            FilteredStaffMembers = AllBS; // If search query is empty, display all staff members
        }
        else
        {
            FilteredStaffMembers = AllBS.Where(bs => bs.Hoten.ToLower().Contains(searchQuery.ToLower())).ToList();
        }
    }
    private void loadgxndachon()
    {
        foreach (var a in dxn)
        {

            foreach(var b in allGXN)
            {
                if (b.Id == a.GoiXetNghiemId)
                {
                    gxndachon.Add(b);
                    tongtien += b.Gia;
                }
            }
            allGXN.RemoveAll(item => item.Id == a.GoiXetNghiemId);
        }
        previousGxndachon = new List<GoiXetNghiem>(gxndachon);
    }
    public async Task LoadAllStudents(int bsid)
    {
        AllDXN.Clear();
        if (DXN is null) return;
        foreach (var student in DXN)
        {
            if (student.BacSiId == bsid && student.Trangthai == "Chờ lấy mẫu" &&
                student.Ngaydat.Date.ToString() == Input.Ngaydat.Date.ToString())
            {
                AllDXN.Add(student);
            }
        }
    }

    private async Task add()
    {
        err.Clear(); // Xóa danh sách lỗi trước đó
                     // Kiểm tra ngày lấy máu
                     // Kiểm tra giờ lấy máu
        if (string.IsNullOrWhiteSpace(Input.giolaymau))
        {
            err.Add("Giờ lấy máu không được để trống.");
        }
        if (gxndachon.Count == 0)
        {
            err.Add("Vui lòng chọn gói xét nghiệm.");
        }
        // Kiểm tra gói xét nghiệm
        // Kiểm tra nhân viên lấy máu
        if (idbs == 0)
        {
            err.Add("Vui lòng chọn nhân viên lấy máu.");
        }

        // Nếu có lỗi, hiển thị thông báo lỗi và không tiếp tục thực hiện việc cập nhật dữ liệu
        if (err.Any())
        {
            return;
        }
        Input.BacSiId = idbs;
        Input.Trangthai = "Chờ lấy mẫu";
        await DXNservice.updateAsync(Input);
        Tinhtrang ttrang = new Tinhtrang
            {
                DonXetNghiemId = Input.Id,
                thoigian = DateTime.Now,
                trangthai = "Đơn đã được duyệt - Người lấy mẫu: Bs."+SelectedDoctor.Hoten
            };
        await TTrangservice.addAsync(ttrang);
        navigation.NavigateTo("/ListDXN");
    }
    public String loadGXN(int id)
    {
        foreach (var gxn in allGXN)
        {
            if (gxn.Id == id)
            {
                return gxn.TenGoi;
            }
        }
        return null;
    }
    private async void LoadBSInfo(int id)
    {
        idbs = id;
        valor = id;
        if (id != 0)
        {
            SelectedDoctor = AllBS.FirstOrDefault(bs => bs.Id == id)!;
        }
        await LoadAllStudents(id);
    }
    private String gioitinh(bool a)
    {
        if (a)
        {
            return "Nam";
        }
        else
        {
            return "Nữ";
        }
    }
    private void LoadgxnInfo(int id)
    {
        idgxn = id;
        valorgxn = id;

        foreach (var xn in allGXN)
        {
            if (xn.Id == id)
            {
                gxndachon.Add(xn);
                tongtien += xn.Gia;
            }
        }
        allGXN.RemoveAll(item => item.Id == id);
        valorgxn = 0;
    }
}
