@page "/XCTDon/{id:int}"
@using Shared.form
@using Append.Blazor.Printing
@inject IPrintingService PrintingService
@rendermode InteractiveAuto
 @inject NavigationManager navigation;
@attribute [Authorize]
<div class="patient-registration-container">
    <div class="patient-info">
        <h2>Thông tin bệnh nhân</h2>
        <div class="info">
            <p><strong>Họ tên:</strong> @user.Hoten</p>
            <p><strong>Ngày sinh:</strong> @user.Ngaysinh.ToString("dd/MM/yyyy")</p>
            <p><strong>Số điện thoại:</strong> @user.SDT</p>
            <p><strong>Địa chỉ:</strong> @user.Diachi</p>
            <p><strong>Email:</strong> @user.Email</p>
            <p><strong>Giới tính:</strong> @gioitinh(@user.Gioitinh)</p>
        </div>
    </div>

    <div class="test-registration-form">
        <h2>Thông tin đơn đăng ký xét nghiệm</h2>
        <div style="background-color:@a;color:black" class="btn btn-primary btn-lg disabled">  <strong>Trạng Thái: </strong>@Input.Trangthai</div> 
        <a href="tinhtrangdon/@id">Xem quy trình đã thực hiện</a>
        <EditForm Model="Input" method="post" OnValidSubmit="add" FormName="register" class="profile-form">
            <DataAnnotationsValidator />
            <hr />

            @if (err.Any())
            {
                <div class="alert alert-danger" role="alert">
                    @foreach (var error in err)
                    {
                        <p>@error</p>
                    }
                </div>
            }
            <div class="form-group">
                <label for="ngaytaodon">Ngày tạo đơn</label>
                <InputDate @bind-Value="Input.ngaytaodon" class="form-control" id="Ngaytaodon" readonly />
                <ValidationMessage For="() => Input.ngaytaodon" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="Ngaydat">Ngày Lấy Máu</label>
                <InputDate @bind-Value="Input.Ngaydat" class="form-control" id="Ngaydat" readonly />
                <ValidationMessage For="() => Input.Ngaydat" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="giolaymau">Giờ lấy máu</label>
                <InputText @bind-Value="Input.giolaymau" class="form-control" id="giolaymau" readonly />
                <ValidationMessage For="() => Input.giolaymau" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="ghiChu">Ghi chú của bệnh nhân</label>
                <InputTextArea @bind-Value="Input.ghiChu" class="form-control" id="ghiChu" readonly />
                <ValidationMessage For="() => Input.ghiChu" class="text-danger" />
            </div>
            @if (gxndachon.Count != 0)
            {
                <div class="table-users">
                    <div class="header">Các gói đã chọn</div>

                    <table cellspacing="0" class="custom-table">
                        @if (gxndachon.Any())
                        {
                            <tr>
                                <th>Tên gói</th>
                                <th>Giá</th>
     
                            </tr>

                            @foreach (var bs in gxndachon)
                            {
                                <tr>
                                    <td><strong>Tên Gói:</strong> @bs.TenGoi</td>
                                    <td><div class="price">Giá: @bs.Gia VND</div></td>
                                </tr>
                            }
                        }
                        <tr>
                            <td colspan="3">Tổng tiền: <span class="total">@tongtien VND</span></td>
                        </tr>
                    </table>
                </div>

            }
            @if(Input.Trangthai=="Từ Chối")
            {
                <div class="reason-for-rejection">
                    <h2>Lý do từ chối:</h2>
                    <p>@lydo.Lydo</p>
                </div>
            }
            @if (SelectedDoctor != null)
            {
                <div class="doctor-info">
                    <div class="doctor-details">
                        <h3>Thông tin bác sĩ:</h3>
                        <p><strong>Họ tên:</strong> @SelectedDoctor.Hoten</p>
                        <p><strong>Chức vụ:</strong> @SelectedDoctor.Chucvu</p>
                        <p><strong>Số điện thoại:</strong> @SelectedDoctor.SDT</p>
                        <p><strong>Email:</strong> @SelectedDoctor.Email</p>
                    </div>
                    <div class="doctor-image">
                        <img src="@SelectedDoctor.Anh" alt="Ảnh bác sĩ">
                    </div>

                    <!-- Thêm các trường thông tin khác của bác sĩ nếu cần -->
                </div>
            }
        </EditForm>
        @if (Input.Trangthai != "Từ Chối")
        {
            if (tt.trangthai == "Chưa Thanh Toán")
            {
                <h2 style="color:red">Bạn Chưa Thanh Toán Hóa Đơn Để Được Xét Duyệt</h2>
                <a href="/ThanhToan/@id" class="btn btn-success">
                    Thanh Toán
                </a>
            }
        }
        @if(Input.Trangthai=="Hoàn thành")
        {
            if (tt.trangthai == "30%")
            {
                <h2 style="color:red">Bạn Chưa Thanh Toán Để Xem Kết Quả</h2>
                <a href="/ThanhToan2/@id" class="btn btn-success">
                     Thanh Toán
                </a>
            }
            if (tt.trangthai == "Đã Thanh Toán")
            {
                <div>
                    <h2>Kết Quả</h2>
                    <EditForm Model="Inputkq" method="post" FormName="addkq" class="profile-form">
                        <DataAnnotationsValidator />
                        <hr />
                        <div class="form-group">
                            <label for="ngaycoKQ">Ngày Có Kết Quả</label>
                            <InputDate @bind-Value="Inputkq.ngaycoKQ" class="form-control" id="ngaycoKQ" readonly />
                            <ValidationMessage For="() => Inputkq.ngaycoKQ" class="text-danger" />
                        </div>
                        <div class="form-group">
                            <label for="khoa">Khoa</label>
                            <Input Value="@loadkhoa(Inputkq.khoa)" class="form-control" id="khoa" readonly />
                        </div>
                        <div class="form-group">
                            <label for="nhommau">Nhóm Máu</label>
                            <InputText @bind-Value="Inputkq.nhommau" class="form-control" id="nhommau" readonly />
                            <ValidationMessage For="() => Inputkq.nhommau" class="text-danger" />
                        </div>
                        <div class="form-group">
                            <label for="ghiChu">Ghi chú</label>
                            <InputTextArea @bind-Value="Inputkq.ghiChu" class="form-control" id="ghiChu" readonly />
                            <ValidationMessage For="() => Inputkq.ghiChu" class="text-danger" />
                        </div>

                        <!-- Input for list of KQandCS -->
                        <h3>Danh sách Kết Quả và Chỉ Số</h3>
                        @if (Inputkq.kQandCs != null)
                        {
                            <div style="overflow-x:auto;">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Chỉ Số</th>
                                            <th>Kết Quả</th>
                                            <th>CSBT</th>
                                            <th>Đơn Vị</th>
                                        </tr>
                                    </thead>
                                    @foreach (var kqandcs in Inputkq.kQandCs)
                                    {
                                        if (kqandcs.goi != goi1)
                                        {
                                            goi1 = kqandcs.goi;
                                            <tr><td colspan="4"><strong>Gói Xét Nghiệm:</strong>@loadtengoi(goi1)</td></tr>
                                        }
                                        <tr>
                                            <td>@loadtenchiso(kqandcs.id)</td>
                                            <td>
                                                @kqandcs.kq
                                            </td>
                                            <td>
                                                @loadcsbt(kqandcs.id)
                                            </td>
                                            <td>
                                                @loaddonvi(kqandcs.id)
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>


                        }
                    </EditForm>
                    
                    <div class="row">
                        @if (rooms == null)
                        {
                            <button class="btn btn-success m-2" style="width:45%" @onclick="tuvan" data-toggle="modal" data-target="#myModal">Liên hệ tư vấn </button>
                        }
                        else
                        {
                            <button class="btn btn-success m-2" style="width:45%" @onclick="tuvan" data-toggle="modal">Liên hệ tư vấn </button>
                        }
                        <button style="width:45%" class="btn btn-success m-2" @onclick="@(_ => PrintingService.Print(rawHtml, PrintType.RawHtml))">
                            Tải Kết Quả
                        </button>
                    </div>
                </div>
            }
        }
        <a href="/lichsuDl"><button style="background-color:red" class="btn btn-primary"> Trở về </button></a>

    </div>
</div>


@code {
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    public string UserName { get; set; }
    int goi = -1;
    int goi1 = -1; 
    public List<Khoa> allkhoa { get; set; } = new();
    private List<string> err = new List<string>();
    private User user = new User();
    public List<GoiXetNghiem> allGXN { get; set; } = new();
    public List<BacSi> AllBS { get; set; } = new();
    private BacSi SelectedDoctor = null;
    int valor, idbs;
    int valorgxn, idgxn;
    public List<GoiXetNghiem> gxndachon { get; set; } = new();
    public List<DXNandGXN> dxn { get; set; } = new();
    public long tongtien = 0;
    private List<GoiXetNghiem> previousGxndachon = new List<GoiXetNghiem>();
    public TuChoi lydo = new();
    string a;
    public KQXN Inputkq { get; set; } = new();
    public List<Chiso> allchiso { get; set; } = new();
    private KetQuaXetNghiem kq { get; set; } = new();
    string rawHtml = "";
    public int stt = 0;
    private ThanhToan tt { get; set; } = new();

    [SupplyParameterFromForm]
    public DonXetNghiem Input { get; set; } = new();

    [Parameter]
    public int id { get; set; }
    roomchat rooms { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Identity.Name;
        Input = await DXNservice.getbyid(id);
        allkhoa = await Khoaservice.getallAsync();
        if(Input==null)
        {
            navigation.NavigateTo("/lichsuDl");
        }
        user = await Usertservice.getuserbyid(Input.UserId);
        allGXN = await GXNservice.getallAsync();
        AllBS = await bacsiservice.getallAsync();
        dxn = await DXNservice.getallGXNAsync(id);

        if(Input.Trangthai!="Từ Chối")
        {
            tt = await TTservice.getbyidDXNAsync(id);            
        }
        loadgxndachon();
        valor = Input.BacSiId ?? 0;
        if(Input.Trangthai=="Từ Chối")
        {
            a = "red";
            lydo = await TCservice.getbyidAsync(Input.Id);
        }
        else
        {
            a = "greenyellow";
            SelectedDoctor = AllBS.FirstOrDefault(bs => bs.Id == valor)!;
        }
        if(Input.Trangthai=="Hoàn thành")
        {
            allchiso = await CSservice.getallAsync();
            Inputkq.kQandCs = new List<ChisoKq>();

            foreach (var a in gxndachon)
            {
                var listcs = await GXNservice.getallCSbyidAsync(a.Id);
                foreach (var b in listcs)
                {
                    ChisoKq kq = new ChisoKq
                        {
                            id = b.ChisoId,
                            goi = a.Id
                        };
                    Inputkq.kQandCs.Add(kq);
                }
            }
            kq = await KQXNservice.getbyid(id);
            Inputkq.ngaycoKQ = kq.ngaycoKQ;
            Inputkq.khoa = kq.khoaId;
            Inputkq.nhommau = kq.nhommau;
            Inputkq.ghiChu = kq.ghiChu;
            var qq = await KQXNservice.getallCSbyidAsync(kq.Id);
            foreach (var a in Inputkq.kQandCs)
            {
                foreach (var b in qq)
                {
                    if (a.id == b.ChisoId)
                    {
                        a.kq = b.KetQua;
                    }
                }
            }

            rawHtml = "<h3>CÔNG TY TNHH GIẢI PHÁP PHẦN MỀM ÂU LẠC</h1>" +
            "<h2 style=\"text-align: center;\">KẾT QUẢ XÉT NGHIỆM</h2>" +
            "<p style=\"text-align: center;\">Ngày có kết quả: " + Inputkq.ngaycoKQ + " -- Số :" + Input.Id + "</p>" +
            "<p> <span style=\"float: left;\">Họ Tên Người Bệnh:" + user.Hoten +
            "</span><span style=\"float: right;\">Ngày sinh:" + user.Ngaysinh.ToString("dd/MM/yyyy") + "&ensp;  Giới Tính: " + gioitinh(user.Gioitinh) + "</span></p>" +
            "<br><p >Địa Chỉ: " + user.Diachi +" / " +@user.CapXa+ " / "+ @user.CapHuyen +"/ Thành phố Huế" +"</p>" +
            "<p>Khoa: " + loadkhoa(Inputkq.khoa) + "&ensp; Nhóm máu: " + Inputkq.nhommau + "</p>" +
            "<p>Ghi chú: "+Inputkq.ghiChu+"</p>"+
    "<br><h3>Danh sách Kết Quả và Chỉ Số</h3>" +
    "<table style=\"text-align: center;width:100%;border-collapse: collapse; border: 1px solid black;\">" +
    "<thead>" +
    "<tr>" +
    "<th style=\"border: 1px solid black;\">STT</th>" +
    "<th style=\"border: 1px solid black;\">Chi số</th>" +
    "<th style=\"border: 1px solid black;\">Kết Quả</th>" +
    "<th style=\"border: 1px solid black;\">CSBT</th>" +
    "<th style=\"border: 1px solid black;\">Đơn Vị</th>" +
    "</tr>" +
    "</thead>";
            foreach (var ss in Inputkq.kQandCs)
            {
                if (ss.goi != goi)
                {
                    goi = ss.goi;
                    rawHtml+= "<tr><td colspan=\"5\"><strong>Gói Xét Nghiệm:</strong>"+loadtengoi(goi)+"</td></tr>";
                }
                stt++;
                rawHtml += "<tr>" +
                           "<td style=\"border: 1px solid black;\">" + stt + "</td>" +
                           "<td style=\"border: 1px solid black;\">" + loadtenchiso(ss.id) + "</td>" +
                           "<td style=\"border: 1px solid black;\">"+ss.kq+"</td>" +
                           "<td style=\"border: 1px solid black;\">" + loadcsbt(ss.id) + "</td>" +
                           "<td style=\"border: 1px solid black;\">" + loaddonvi(ss.id) + "</td>" +
                           "</tr>";
            }

            rawHtml += "</table>";
        }
        var us = await Usertservice.getuserbyemail(UserName);
        var allroom = await Roomchatservice.getallbyidAsync(us.Id);
        string name = "Tư Vấn Đơn :" + id;
         rooms = allroom.FirstOrDefault(a => a.Name == name);
    }
    private void loadgxndachon()
    {
        foreach (var a in dxn)
        {

            foreach (var b in allGXN)
            {
                if (b.Id == a.GoiXetNghiemId)
                {
                    gxndachon.Add(b);
                    tongtien += b.Gia;
                }
            }
            allGXN.RemoveAll(item => item.Id == a.GoiXetNghiemId);
        }
        previousGxndachon = new List<GoiXetNghiem>(gxndachon);
    }
    private string loadkhoa(int id)
    {
        foreach (var i in allkhoa)
        {
            if (i.Id == id)
            {
                return i.ten;
            }
        }
        return null;
    }
    private async Task add()
    {
        err.Clear(); // Xóa danh sách lỗi trước đó
                     // Kiểm tra ngày lấy máu
                     // Kiểm tra giờ lấy máu
        if (string.IsNullOrWhiteSpace(Input.giolaymau))
        {
            err.Add("Giờ lấy máu không được để trống.");
        }
        if (gxndachon.Count == 0)
        {
            err.Add("Vui lòng chọn gói xét nghiệm.");
        }
        // Kiểm tra gói xét nghiệm
        // Kiểm tra nhân viên lấy máu
        if (idbs == 0)
        {
            err.Add("Vui lòng chọn nhân viên lấy máu.");
        }

        // Nếu có lỗi, hiển thị thông báo lỗi và không tiếp tục thực hiện việc cập nhật dữ liệu
        if (err.Any())
        {
            return;
        }
        // Kiểm tra thay đổi của gxndachon
        foreach (var newItem in gxndachon.Except(previousGxndachon))
        {
            DXNandGXN a = new DXNandGXN
                {
                    DonXetNghiemId = id,
                    GoiXetNghiemId = newItem.Id
                };
            await DXNservice.addnew(a);
        }

        foreach (var removedItem in previousGxndachon.Except(gxndachon))
        {
            // removedItem là phần tử đã bị xóa
            // Thực hiện hành động tương ứng, ví dụ: xóa khỏi cơ sở dữ liệu
            foreach (var a in dxn)
            {
                if (a.GoiXetNghiemId == removedItem.Id)
                {
                    await DXNservice.deletegxnAsync(a.Id);
                }
            }
        }

        // Đặt lại danh sách trước đó để chuẩn bị cho lần lặp tiếp theo
        previousGxndachon = new List<GoiXetNghiem>(gxndachon);
        Input.BacSiId = idbs;
        await DXNservice.updateAsync(Input);
        navigation.NavigateTo("/lichsuDl");
    }

    public String loadGXN(int id)
    {
        foreach (var gxn in allGXN)
        {
            if (gxn.Id == id)
            {
                return gxn.TenGoi;
            }
        }
        return null;
    }
    private void LoadBSInfo(int id)
    {
        idbs = id;
        valor = id;
        if (id != 0)
        {
            SelectedDoctor = AllBS.FirstOrDefault(bs => bs.Id == id)!;
        }
    }

    private String gioitinh(bool a)
    {
        if (a)
        {
            return "Nam";
        }
        else
        {
            return "Nữ";
        }
    }
    private async void tuvan()
    {

        
        if (rooms != null)
        {
            navigation.NavigateTo("/Chat/" + rooms.Id);
        }
    }
    private async void remove(int id)
    {
        foreach (var gxn in gxndachon)
        {
            if (gxn.Id == id)
            {
                allGXN.Add(gxn);
                tongtien -= gxn.Gia;
            }
        }
        gxndachon.RemoveAll(item => item.Id == id);
    }
    private void LoadgxnInfo(int id)
    {
        idgxn = id;
        valorgxn = id;

        foreach (var xn in allGXN)
        {
            if (xn.Id == id)
            {
                gxndachon.Add(xn);
                tongtien += xn.Gia;
            }
        }
        allGXN.RemoveAll(item => item.Id == id);
        valorgxn = 0;
    }
    private string loadtengoi(int id)
    {
        foreach (var i in gxndachon)
        {
            if (i.Id == id)
            {
                return i.TenGoi;
            }
        }
        return null;
    }
    private string loadcsbt(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.CSBT;
            }
        }
        return null;
    }

    private string loaddonvi(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.DonVi;
            }
        }
        return null;
    }
    private string loadtenchiso(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.ten;
            }
        }
        return null;
    }
    int iduser = 0;
    string err1 = "";
    BacSi bs { get; set; } = null;
    private void layuser(int idbs)
    {
        iduser = idbs;
        bs = AllBS.FirstOrDefault(p => p.Id == idbs);
    }
    private async Task addbs()
    {
        err1 = "";
        if (iduser == 0)
        {
            err1 = "Vui lòng chọn người bác sĩ";
            return;
        }
        var us = await Usertservice.getuserbyemail(UserName);
        roomchat room = new()
            {
                Name = "Tư Vấn Đơn :" + id,
                userid = us.Id,
                ngaytao = DateTime.Now,
                idbs=iduser
            };
        var ro = await Roomchatservice.addAsync(room);
        Chat ha = new()
            {
                data = "Tôi cần hỗ trợ cho đơn " + id,
                roomchatid = ro.Id,
                thoigian = DateTime.Now,
                trangthai = 1,
                userid = us.Id
            };
        await Chatservice.addAsync(ha);
        navigation.NavigateTo("/Chat/" + ro.Id);
    }
}
<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chọn bác sĩ tư vấn</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                @if (err1 != "")
                {
                    <div class="alert alert-danger">@err1</div> <br>
                }
                <InputSelect ValueChanged="@((int value)=>layuser(value))" ValueExpression="@(()=>iduser)" Value="iduser" class="form-control" id="userid">
                    <option value="0">Chọn bác sĩ tư vấn</option>
                    @foreach (var use in AllBS)
                    {
                        <option value="@use.Id">@use.Hoten</option>
                    }
                </InputSelect>
                <h2>Thông tin Bác sĩ</h2>
                @if (bs != null)
                {
                    <div class="info">
                        <img style="width:70%" src="@bs.Anh">
                        <p style="color:black" class="text-left"><strong>Họ tên:</strong> @bs.Hoten</p>
                        <p style="color:black" class="text-left"><strong>Chức vụ:</strong> @bs.Chucvu</p>
                        <p style="color:black" class="text-left"><strong>Số điện thoại:</strong> @bs.SDT</p>
                        <p style="color:black" class="text-left"><strong>Email:</strong> @bs.Email</p>

                    </div>
                }
                <a @onclick="addbs" style="width:100%;color:black" class="btn btn-primary">Tư vấn</a>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>