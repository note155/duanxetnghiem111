@page "/giohangdxn"
@using Shared.Model
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.Authorization
@using Shared.form
@inject NavigationManager navigation;
@attribute [Authorize]
<h1>Đơn Xét Nghiệm</h1>
<hr />
@if (ChuaChonGoi)
{
    <div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thông báo</h5>
                    <button type="button" class="btn-close" @onclick="(() => ChuaChonGoi = false)"></button>
                </div>
                <div class="modal-body">
                    Bạn chưa chọn gói xét nghiệm nào.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="(() => ChuaChonGoi = false)">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}
@if (!GHang.Any())
{
    <p>Đơn xét nghiệm của bạn đang trống</p>
    <div class="row" style="height:500px"></div>
}

@if (GHang.Any())
{
    <div class="mb-3">
        <button class="btn btn-danger" @onclick="DeleteSelected">Xóa các mục được chọn</button>
        <button class="btn btn-success" @onclick="chontatca">@nd</button>
    </div>
    <div class="table-responsive">
        <table class="table table-striped mt-3">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Người sử dụng</th>
                    <th scope="col">Gói Xét Nghiệm</th>
                    <th scope="col">Số tiền của đơn</th>
                    <th scope="col"></th>
                    <th scope="col">Chọn</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ghang in GHang)
                {
                    <tr>
                        <td>@ghang.id</td>
                        <td>@ghang.iduser</td>
                        <td>
                            @foreach (var gxn in ghang.listgxn)
                            {
                                <p>@gxn.TenGoi - <span class="text-success">@gxn.Gia.ToString("N0") VND</span></p>
                            }
                        </td>
                        <td>@ghang.sotien.ToString("N0") VND</td>
                        <td><a href="/EditDL/@ghang.id" class="btn btn-success btn-sm">Chỉnh sửa</a></td>
                        <td>
                            <div class="form-check form-switch d-flex justify-content-center align-items-center">
                                <input @bind=ghang.chon class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="mb-3">
        <a class="btn1 btn-success1 float-end" @onclick="@(() => add())">Thanh toán</a>
        <p class="total-amount">Tổng tiền: <strong style="color:red;font-size:30px;">@TinhTongTien() VND</strong></p>
    </div>
    <div class="row" style="height:100px"></div>
}

@code {
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    Boolean nhan = false;
    string nd = "Chọn tất cả";
    public List<DonXetNghiem> DXNList { get; set; } = new();
    public List<gio> GHang { get; set; } = new();
    public string UserName { get; set; }
    public User user { get; set; } = new();
    public List<User> Alluser { get; set; } = new();
    public bool ChuaChonGoi = false;
    public List<GoiXetNghiem> AllGXN { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Identity.Name;
        user = await Usertservice.getuserbyemail(UserName);
        if (user == null)
        {
            navigation.NavigateTo("/AddUser");
        }
        AllGXN = await GXNservice.getallAsync();
        DXNList = await DXNservice.getallbyiduserAsync(user.Id);
        Alluser = await Usertservice.getalluserbyemailAsync(UserName);
        foreach (var us in Alluser)
        {
            var don = await DXNservice.getallbyiduserAsync(us.Id);
            foreach (var a in don)
            {
                if (a.Trangthai == "Chờ Thanh Toán" && a.UserId != user.Id)
                {
                    DXNList.Add(a);
                }
            }
        }
        foreach (var dxn in DXNList)
        {
            if (dxn.Trangthai == "Chờ Thanh Toán")
            {
                gio a = new()
                    {
                        chon = false,
                        id = dxn.Id,
                    };
                foreach (var u in Alluser)
                {
                    if (dxn.UserId == u.Id)
                    {
                        a.iduser = u.Hoten;
                    }
                }
                GHang.Add(a);
            }
        }
        foreach (var g in GHang)
        {
            g.listgxn = new List<GoiXetNghiem>();
            var gxn = await DXNservice.getallGXNAsync(g.id);
            foreach (var b in AllGXN)
            {
                foreach (var c in gxn)
                {
                    if (b.Id == c.GoiXetNghiemId)
                    {
                        g.listgxn.Add(b);
                    }
                }
            }
            var tt = await TTservice.getbyidDXNAsync(g.id);
            g.sotien = tt.Tongtien;
        }
    }
    public void chontatca()
    {
        if (nd == "Chọn tất cả")
        {
            foreach (var a in GHang)
            {
                a.chon = true;
            }
            nd = "Bỏ chọn tất cả";
        }
        else
        {
            foreach (var a in GHang)
            {
                a.chon = false;
            }
            nd = "Chọn tất cả";
        }

    }
    private async void add()
    {
        var itemsToRemove = GHang.Where(student => student.chon == true).ToList();
        if (itemsToRemove.Count == 0)
        {
            ChuaChonGoi = true;
            return;
        }
        string id = "";
        foreach (var student in itemsToRemove)
        {
            id += student.id + ";";
        }
        navigation.NavigateTo("ThanhToandxn/" + id);
    }
    private async void DeleteSelected()
    {
        var itemsToRemove = GHang.Where(student => student.chon == true).ToList();
        foreach (var student in itemsToRemove)
        {
            GHang.Remove(student);
            await DXNservice.deleteAsync(student.id);
            navigation.NavigateTo(navigation.Uri, true);
        }

    }


    public long? TinhTongTien()
    {
        long? tongTien = 0;
        foreach (var item in GHang)
        {
            if (item.chon == true)
            {
                tongTien += item.sotien;
            }
        }
        return tongTien;
    }
    public class gio
    {
        public int id { get; set; }
        public string iduser { get; set; }
        public List<GoiXetNghiem> listgxn { get; set; }
        public long sotien { get; set; }
        public Boolean chon { get; set; }
    }
}