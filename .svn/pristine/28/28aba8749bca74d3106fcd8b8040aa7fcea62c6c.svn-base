@page "/addKQXN/{id:int}"
@using Shared.form
@rendermode InteractiveAuto
@inject NavigationManager navigation;
@layout AdminLayout
@attribute [Authorize]

@if (isLoading)
{
    <div id="loader-container" class="loader-container">
        <div class="loader"></div>
    </div>
    <script>
        window.onload = function () {
            document.getElementById("loader-container").addEventListener("click", function (event) {
                event.stopPropagation();
            });

            document.body.addEventListener("keydown", function (event) {
                event.stopPropagation();
            });
        };
    </script>
}
<div class="patient-registration-container">
    <div class="patient-info">
        <h2>Thông tin bệnh nhân</h2>
        <div class="info">
            <p><strong>Họ tên:</strong> @user.Hoten</p>
            <p><strong>Ngày sinh:</strong> @user.Ngaysinh.ToString("dd/MM/yyyy")</p>
            <p><strong>Số điện thoại:</strong> @user.SDT</p>
            <p><strong>Địa chỉ:</strong> @user.Diachi</p>
            <p><strong>Email:</strong> @user.Email</p>
            <p><strong>Giới tính:</strong> @gioitinh(@user.Gioitinh)</p>
        </div>
    </div>

    <div class="test-registration-form">
        <h2>Thông tin đơn đăng ký xét nghiệm</h2>
        <div style="background-color:greenyellow;color:black" class="btn btn-primary btn-lg disabled">  <strong>Trạng Thái: </strong>@Input.Trangthai</div>
        <EditForm Model="Input" method="post" OnValidSubmit="add" FormName="register" class="profile-form">
            <DataAnnotationsValidator />
            <hr />


            <div class="form-group">
                <label for="ngaytaodon">Ngày tạo đơn</label>
                <InputDate @bind-Value="Input.ngaytaodon" class="form-control" id="Ngaytaodon" readonly />
                <ValidationMessage For="() => Input.ngaytaodon" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="Ngaydat">Ngày Lấy Máu</label>
                <InputDate @bind-Value="Input.Ngaydat" class="form-control" id="Ngaydat" min="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
                <ValidationMessage For="() => Input.Ngaydat" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="giolaymau">Giờ lấy máu</label>
                <InputText @bind-Value="Input.giolaymau" class="form-control" id="giolaymau" readonly />
                <ValidationMessage For="() => Input.giolaymau" class="text-danger" />
            </div>
        </EditForm>
        <div >
            <h2>Kết Quả</h2>
            <EditForm Model="Inputkq" method="post" OnValidSubmit="addkq" FormName="addkq" class="profile-form">
                <DataAnnotationsValidator />
                <hr />
                <div class="form-group">
                    <label for="ngaycoKQ">Bác Sĩ Thực Hiện</label>
                    <InputSelect id="giolaymau" @bind-Value="Inputkq.bsid" class="form-control">
                        <option value="0">Chọn</option>
                        @foreach(var bs in allBS)
                        {
                            <option value="@bs.Id">@bs.Hoten</option>
                        }
                    </InputSelect>
                    @if (err2 != "")
                    {
                        <p style="color:red" class="error-message">@err2</p>
                    }
                </div>
                <div class="form-group">
                    <label for="maythuchien">Máy Thực Hiện Xét Nghiệm</label>
                    <InputSelect @bind-Value="Inputkq.maythuchien" class="form-control" id="khoa">
                        <option value="0">Chọn</option>
                        @foreach (var may in allMayXN)
                        {
                            if (may.phongid == mau.PhongId)
                            {
                                <option value="@may.Id">@may.Name</option>
                            }
                        }
                    </InputSelect>
                    @if (err3 != "")
                    {
                        <p style="color:red" class="error-message">@err3</p>
                    }
                </div>
                <div class="form-group">
                    <label for="ngaycoKQ">Ngày Có Kết Quả</label>
                    <InputDate @bind-Value="Inputkq.ngaycoKQ" class="form-control" id="ngaycoKQ" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <ValidationMessage For="() => Inputkq.ngaycoKQ" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="khoa">Khoa</label>
                    <InputSelect @bind-Value="Inputkq.khoa" class="form-control" id="khoa">
                        <option value="0">Chọn</option>
                        @foreach (var khoa in allkhoa)
                        {
                            <option value="@khoa.Id">@khoa.ten</option>
                        }
                    </InputSelect>
                    @if (err1 != "")
                    {
                        <p style="color:red" class="error-message">@err1</p>
                    }
                </div>
                <div class="form-group">
                    <label for="nhommau">Nhóm Máu</label>
                    <InputText @bind-Value="Inputkq.nhommau" class="form-control" id="nhommau" />
                    <ValidationMessage For="() => Inputkq.nhommau" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="ghiChu">Ghi chú</label>
                    <InputTextArea @bind-Value="Inputkq.ghiChu" class="form-control" id="ghiChu" />
                    <ValidationMessage For="() => Inputkq.ghiChu" class="text-danger" />
                </div>

                <!-- Input for list of KQandCS -->
                <button style="background-color: chocolate" @onclick:preventDefault="true" @onclick="Nhankq">Nhận kết quả xét nghiệm từ máy</button>
                <h3>Danh sách Kết Quả và Chỉ Số</h3>
                @if (err.Any())
                {
                    <div id="errorContainer" class="alert alert-danger" role="alert">
                        @foreach (var error in err)
                        {
                            <p>@error</p>
                        }
                    </div>
                }
                @if (Inputkq.kQandCs != null)
                {
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Chỉ Số</th>
                                <th>Kết Quả</th>
                                <th>CSBT</th>
                                <th>Đơn Vị</th>
                            </tr>
                        </thead>
                        @foreach(var tl in gxndachon)
                        {
                            <tr><td colspan="4"><strong>Gói Xét Nghiệm:</strong>@tl.TenGoi</td></tr>
                            @foreach (var kqandcs in Inputkq.kQandCs)
                            {
                                if (kqandcs.goi == tl.Id)
                                {
                                    <tr>
                                        <td>@loadtenchiso(kqandcs.id)</td>
                                        <td>
                                            <InputText @bind-Value="kqandcs.kq" class="form-control" />
                                            <ValidationMessage For="() => kqandcs.kq" class="text-danger" />
                                        </td>
                                        <td>
                                            @loadcsbt(kqandcs.id)
                                        </td>
                                        <td>
                                            @loaddonvi(kqandcs.id)
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </table>
                    <a href="/listDXNKQ"><button style="background-color:red" class="btn btn-primary"> Hủy </button></a>
                    <button style="background-color:lawngreen" type="submit" class="btn btn-primary">Trả kết quả</button>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    int goi=-1;
    public List<GoiXetNghiem> allGXN { get; set; } = new();
    public List<BacSi> allBS { get; set; } = new();
    public List<GoiXetNghiem> gxndachon { get; set; } = new();
    public List<DXNandGXN> dxn { get; set; } = new();
    public List<Chiso> allchiso { get; set; } = new();
    public DonXetNghiem Input { get; set; } = new();
    private User user { get; set; } = new();
    public Chiso cs { get; set; } = new();
    public Mau mau{ get; set; } = new();
    private List<string> err = new List<string>();
    public List<Khoa> allkhoa { get; set; } = new();
    public List<MayXetNghiem> allMayXN { get; set; } = new();
    [SupplyParameterFromForm]
    public KQXN Inputkq { get; set; } = new();
    string err1 = "", err2 = "", err3 = "";
    protected override async Task OnInitializedAsync()
    {
        await checkbs();
        Input = await DXNservice.getbyid(id);
        user = await Usertservice.getuserbyid(Input.UserId);
        allGXN = await GXNservice.getallAsync();
        dxn = await DXNservice.getallGXNAsync(id);
        allkhoa = await Khoaservice.getallAsync();
        allMayXN = await MayXNservice.getallAsync();
        loadgxndachon();
        mau = await Mauservice.getbyid(id);
        allBS = await bacsiservice.getallAsync();
        allchiso = await CSservice.getallAsync();
        Inputkq.ngaycoKQ = DateTime.Now;
        Inputkq.kQandCs = new List<ChisoKq>();

        foreach (var a in gxndachon)
        {
            var listcs = await GXNservice.getallCSbyidAsync(a.Id);
            foreach(var b in listcs)
            {       
                ChisoKq kq = new ChisoKq
                    {
                        id = b.ChisoId,
                        goi = a.Id
            };
                Inputkq.kQandCs.Add(kq);
            }
        }
    }
    public async Task checkbs()
    {
        var authState = await checkbss.GetAuthenticationStateAsync();
        var UserName = authState.User.Identity.Name;
        var bs = await bacsiservice.getbyemail(UserName);
        if (bs == null)
        {
            navigation.NavigateTo("/err");
        }
    }
    private async Task add()
    {

    }
    private async Task Nhankq()
    {
        var lala = await KQXNservice.Testkq();
        foreach(var s in lala){
            foreach(var a in Inputkq.kQandCs)
            {
                if (a.id == s.id)
                {
                    a.kq = s.ketqua;
                }
            }
        }
    }
    private async Task addkq()
    {
        isLoading = true;
        err1 = ""; err2 = ""; err3 = "";
        err.Clear();
        if (Inputkq.khoa==0||Inputkq.khoa==null)
        {
            err.Add("vui lòng chọn khoa");
            err1 = "vui lòng chọn khoa";
        }
        if (Inputkq.bsid == 0)
        {
            err.Add("vui lòng chọn bác sĩ thực hiện");
            err2 = "vui lòng chọn bác sĩ thực hiện";
        }
        if (Inputkq.maythuchien == 0 || Inputkq.maythuchien == null)
        {
            err.Add("vui lòng chọn máy thực hiện");
            err3 = "vui lòng chọn máy thực hiện";
        }
        if (string.IsNullOrEmpty(Inputkq.nhommau))
        {
            err.Add("vui lòng nhập nhóm máu");
        }
        foreach(var a in Inputkq.kQandCs)
        {
            if (string.IsNullOrEmpty(a.kq))
            {
                err.Add("Vui lòng điền đủ kết quả");
                break;
            }
        }
        if (err.Any())
        {
            await JSRuntime.InvokeVoidAsync("scrollToError");
            return;
        }
        KetQuaXetNghiem kqq = new KetQuaXetNghiem
        {
            DonXetNghiemId=id,
            ngaycoKQ=Inputkq.ngaycoKQ,
            ghiChu=Inputkq.ghiChu,
            khoaId=Inputkq.khoa,
            nhommau=Inputkq.nhommau
        };
        var kq1 = await KQXNservice.addAsync(kqq);
        foreach(var ab in Inputkq.kQandCs)
        {
            KQandCS cs1 = new KQandCS
            {
                idgoi=ab.goi,
                KetQuaXetNghiemId=kq1.Id,
                ChisoId=ab.id,
                KetQua=ab.kq
            };
            await KQXNservice.addKQandCS(cs1);
        }
        mau.bacsiid=Inputkq.bsid;
        mau.MayxetnghiemId = Inputkq.maythuchien;
        await Mauservice.updateAsync(mau);
        Input.Trangthai = "Hoàn thành";
        await DXNservice.updateAsync(Input);
        gmail gm = new gmail
            {
                email = user.Email,
                hoten = user.Hoten,
                iddon = id
            };
        await KQXNservice.guiemail(gm);
        Tinhtrang ttrang = new Tinhtrang
            {
                DonXetNghiemId = Input.Id,
                thoigian = DateTime.Now,
                trangthai = "Xét nghiệm thành công - Đã có kết quả"
            };
        await TTrangservice.addAsync(ttrang);
        isLoading = false;
        navigation.NavigateTo("/listDXNKQ");
    }
    private void loadgxndachon()
    {
        foreach (var a in dxn)
        {

            foreach (var b in allGXN)
            {
                if (b.Id == a.GoiXetNghiemId)
                {
                    gxndachon.Add(b);
                }
            }
            allGXN.RemoveAll(item => item.Id == a.GoiXetNghiemId);
        }
    }
    private string loadtengoi(int id)
    {
        foreach(var i in gxndachon)
        {
            if (i.Id == id)
            {
                return i.TenGoi;
            }
        }
        return null;
    }
    private string loadcsbt(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.CSBT;
            }
        }
        return null;
    }
    private string loaddonvi(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.DonVi;
            }
        }
        return null;
    }
    private string loadtenchiso(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.ten;
            }
        }
        return null;
    }
    private String gioitinh(bool a)
    {
        if (a)
        {
            return "Nam";
        }
        else
        {
            return "Nữ";
        }
    }
    private bool isLoading = false;

}
<script>
    window.scrollToError = function () {
        var errorContainer = document.getElementById("errorContainer");
        if (errorContainer) {
            errorContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    }

</script>