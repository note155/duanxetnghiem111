@page "/Capquyen"
@rendermode InteractiveAuto
@attribute [Authorize]
@layout AdminLayout
<h3>Cấp Quyền</h3>

<div class="search-container">
	<input type="text" @bind="Inputkq" @bind:event="oninput" @onkeypress="nhanenter" placeholder="Nhập tên bác sĩ" />
	<button @onclick="timkiem">Tìm kiếm</button>
</div>

<div class="row">
	<div class="col-sm-6">
		<h4>Bác sĩ đã được cấp quyền</h4>
		<table class="table">
			<thead>
				<tr>
					<th scope="col">Họ Tên</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var bs in dscq)
				{
					<tr>
						<td data-toggle="modal" data-target="#myModal" @onclick="()=>htbs(bs.Id)">@bs.Hoten</td>
						<td><button @onclick="()=>huyquyen(bs.Id)"> Hủy quyền</button></td>
					</tr>
				}
			</tbody>
		</table>
	</div>
	<div class="col-sm-6">
		<h4>Bác sĩ chưa được cấp quyền</h4>
		<table class="table">
			<thead>
				<tr>
					<th scope="col">Họ Tên</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var bs in dsbs)
				{
					<tr>
						<td data-toggle="modal" data-target="#myModal" @onclick="()=>htbs(bs.Id)">@bs.Hoten</td>
						<td><button @onclick="()=>capquyenbs(bs.Id)"> Cấp quyền</button></td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>
<!-- Modal -->
<div  id="myModal" class="modal fade" role="dialog">
	<div class="modal-dialog" >

		<!-- Modal content-->
		<div  class="modal-content">
			@if (haha)
			{
				<div  class="modal-header">
					Chi tiết bác sĩ: #@idbs
					<button style="width:auto;height:auto;color:black;" type="button" class="close" data-dismiss="modal">&times;</button>
				</div>
				<div  class="modal-body">
					<TTBS id="@idbs"/>
				</div>
			}
		</div>
	</div>
</div>
@code {
	public List<BacSi> dsbs { get; set; } = new();
	public List<BacSi> dscq { get; set; } = new();
	public List<BacSi> allbs { get; set; } = new();
	public List<BacSi> allbs1 { get; set; } = new();
	public String Inputkq { get; set; } = new("");
	int idbs = 0;
	Boolean haha = false;
	protected override async Task OnInitializedAsync()
	{
		await checkbs();
		allbs = await bacsiservice.getallAsync();
		allbs1 = allbs;
		getbs();
	}
	public void getbs()
	{
		dscq.Clear();
		dsbs.Clear();
		foreach (var bs in allbs)
		{
			if (bs.trangthai == "1")
			{
				dscq.Add(bs);
			}
			else
			{
				dsbs.Add(bs);
			}
		}
	}
	public void htbs(int bs)
	{
		idbs = bs;
		haha = true;
	}
	public async Task checkbs()
	{
		var authState = await checkbss.GetAuthenticationStateAsync();
		var UserName = authState.User.Identity.Name;
		var bs = await bacsiservice.getbyemail(UserName);
		if (bs == null)
		{
			navigation.NavigateTo("/err");
		}
	}
	public async Task capquyenbs(int id)
	{
		var vs = dsbs.FirstOrDefault(a => a.Id == id);
		vs.trangthai = "1";
		await bacsiservice.updateAsync(vs);
		dsbs.Remove(vs);
		dscq.Add(vs);
	}
	public async Task huyquyen(int id)
	{
		var vs = dscq.FirstOrDefault(a => a.Id == id);
		vs.trangthai = "0";
		await bacsiservice.updateAsync(vs);
		dsbs.Add(vs);
		dscq.Remove(vs);
	}
	private async Task nhanenter(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			timkiem();
		}
	}
	private async Task timkiem()
	{
		allbs = allbs1;
		if (string.IsNullOrEmpty(Inputkq))
		{			
			getbs();
		}
		else
		{
			allbs = allbs.Where(dx => dx.Hoten.Contains(Inputkq, StringComparison.OrdinalIgnoreCase)).ToList();
			getbs();
		}
	}
}
