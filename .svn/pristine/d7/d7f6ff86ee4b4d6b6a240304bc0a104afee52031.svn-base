@page "/DichVuXetNghiem"
@rendermode InteractiveAuto
 @inject NavigationManager navigation;
 @using Shared.Model;
@using Microsoft.AspNetCore.Authorization
@using Shared.form
<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chọn người thân</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                @if (err != "")
                {
                    <div class="alert alert-danger">@err</div> <br>
                }
                <InputSelect ValueChanged="@((int value)=>layuser(value))" ValueExpression="@(()=>iduser)" Value="iduser" class="form-control" id="userid">
                    <option value="0">Chọn người thân</option>
                    @foreach (var use in alluser.Skip(1))
                    {
                        <option value="@use.Id">@use.Hoten</option>
                    }
                </InputSelect>
                <h2>Thông tin bệnh nhân</h2>
                @if (user != null)
                {
                    <div class="info">
                        <p style="color:black" class="text-left"><strong>Họ tên:</strong> @user.Hoten</p>
                        <p style="color:black" class="text-left"><strong>Ngày sinh:</strong> @user.Ngaysinh.ToString("dd/MM/yyyy")</p>
                        <p style="color:black" class="text-left"><strong>Số điện thoại:</strong> @user.SDT</p>
                        <p style="color:black" class="text-left"><strong>Địa chỉ:</strong> @user.Diachi, @user.CapXa, @user.CapHuyen, TT Huế</p>
                        <p style="color:black" class="text-left"><strong>Email:</strong> @user.Email</p>
                        <p style="color:black" class="text-left"><strong>Giới tính:</strong> @gioitinh(@user.Gioitinh)</p>

                    </div>

                }
                <a href="/adduser" style="width:auto;color:black" class="btn btn-info">Thêm thông tin người thân</a>
                <a @onclick="add" style="width:auto;color:black" class="btn btn-success">Đặt lịch</a>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<!-- hinh nen goi dich vu-->
<div class="container d-flex align-items-center justify-content-center" style="margin-bottom:35rem;">
    <div class="card-body overlay">
        <div class="row">
            <div class="col-md-6 d-flex flex-column align-items-center">
                <h4>
                    Gói Dịch Vụ Xét Nghiệm Sức Khỏe
                </h4>
                <p>
                    Cung cấp các gói xét nghiệm máu phù hợp với nhu cầu của bạn
                </p>
                <div class="d-flex flex-row gap-3">
                    <a href="/quytrinh" class="button button-primary1">Quy trình</a>
                    <a href="/quytrinh" class="button button-primary1"> Đặt lịch hẹn</a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- tìm kiếm các gói dịch vụ-->
<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="search-container d-flex">
                <input type="text" @bind="searchTerm" class="form-control" placeholder="Tìm kiếm ...">
                <button @onclick="Search" class="btn1 btn-primary ml-auto">Tìm kiếm</button>
            </div>
        </div>
    </div>
</div>

<!--list goi xét nghiem-->
<div class="package-container" style="margin-bottom: 10rem;">
    @if (!FilteredGoi.Any())
    {
        <p><em>Không tìm thấy kết quả.</em></p>
    }
    @if (FilteredGoi.Any())
    {
        <div class="team-items">
            @foreach (var goi in FilteredGoi)
            {
                <div class="package-item">
                    <div class="package-item-photo">
                        <div class="package-item-photo" style="position: relative;">
                            <img src="@goi.Anh" alt="" loading="lazy" style="width: 100%; display: block;">
                            <div class="alert alert-info" style="position: absolute; top: 0; right: 0;">
                                <a href="/ChiTietGoiXetNghiem/@goi.Id" style="text-decoration: underline;">Xem chi tiết</a>
                            </div>
                        </div>
                    </div>
                    <div class="package-item-detail">
                        <div class="package-item-price">@string.Format("{0:#,##0}", Convert.ToDecimal(goi.Gia)) VND</div>
                        <h3 class="package-item-title">@goi.TenGoi</h3>
                        <div class="package-item-meta">
                            <div class="package-item-gender">
                                Thời gian :
                                @goi.ThoiGian
                            </div>
                            <div class="alert alert-info" style="display: flex; justify-content: space-between;">
                                <a class="custom-link" @onclick="@(() => themgio(goi.Id,1))">
                                    <span><i class="fas fa-circle circle-icon"></i> Đặt lịch bản thân</span>
                                </a>
                                @if (UserName != null)
                                {
                                    <a class="custom-link" @onclick="@(() => themgio(goi.Id,2))" data-toggle="modal" data-target="#myModal">
                                        <span><i class="fas fa-circle circle-icon"></i>Đặt lịch người thân</span>
                                    </a>
                                }
                                else
                                {
                                    <a class="custom-link" @onclick="@(() => themgio(goi.Id,2))">
                                        <span><i class="fas fa-circle circle-icon"></i>Đặt lịch người thân</span>
                                    </a>
                                }
                                <a class="custom-link" @onclick="@(() => themgio(goi.Id,3))">
                                    <span><i class="fas fa-circle circle-icon"></i>Liên hệ tư vấn</span>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

            }
        </div>

    }
</div>

<!-- Nút phân trang-->
<nav aria-label="Page navigation" style="margin-bottom: 10rem;">
    <nav id="pagination-7960274864" aria-label="Page navigation" class="text-center">
        <ul class="pagination mb-0 justify-content-center">
            <!-- Nút trang trước -->
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a aria-label="Trước" class="page-nav previous page-link" rel="tooltip" tabindex="-1" title="Trước" @onclick="(() => ChangePage(currentPage - 1))">
                    <i class="fa fa-angle-left"></i>
                    <span>&#10094;</span>
                </a>
            </li>
            <!-- Các nút trang -->
            @for (var pageNumber = 1; pageNumber <= totalPages; pageNumber++)
            {
                var localPageNumber = pageNumber; // Tạo biến cục bộ ở đây
                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                    <a class="page-link" @onclick="(() => ChangePage(localPageNumber))">@pageNumber</a>
                </li>
            }

            <!-- Nút trang tiếp theo -->
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a aria-label="Kế tiếp" class="page-nav next page-link" rel="tooltip" tabindex="-1" title="Kế tiếp" @onclick="(() => ChangePage(currentPage + 1))">
                    <i class="fa fa-angle-right"></i>
                    <span>&#10095;</span>
                </a>
            </li>
        </ul>
    </nav>
</nav>


@code {
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [SupplyParameterFromForm]
    public int Inputkq { get; set; } = new();

    public string UserName { get; set; }
    public User user { get; set; } = new();
    public User user1 { get; set; } = new();
    public List<GoiXetNghiem> AllGoi { get; set; } = new();
    public List<GioHang> gioHangList { get; set; } = new();
    private int itemsPerPage = 9; // Số lượng mục trên mỗi trang
    private int currentPage = 1;
    private int totalPages;
    private int selectedGoiId = -1; // Thêm biến để lưu trữ ID của gói được chọn
    private bool hasRendered;
    private bool showNotification = false;
    private string notificationMessage = "";
    private string searchTerm = "";
    private List<GoiXetNghiem> FilteredGoi { get; set; } = new List<GoiXetNghiem>();
    public List<User> alluser { get; set; } = new();
    int iduser = 0, goiint = 0;
    string err = "";
    protected override async Task OnInitializedAsync()
    {
        await LoadAlLGoi();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Identity.Name;
        if (UserName != null)
        {
            alluser = await Usertservice.getalluserbyemailAsync(UserName);
            user1 = await Usertservice.getuserbyemail(UserName);
        }
        user = alluser.FirstOrDefault(p => p.Id == Inputkq);

    }
    public async Task themgio(int id, int haha)
    {
        if (UserName == null)
        {
            navigation.NavigateTo("/Account/Login");
            return;
        }
        if (user1 == null)
        {
            navigation.NavigateTo("/AddUser");
            return;
        }

        var goi = FilteredGoi.FirstOrDefault(g => g.Id == id);

        if (goi != null)
        {
            if (haha == 1)
            {
                navigation.NavigateTo("/datlichid/" + id);
            }
            if (haha == 2)
            {
                goiint = id;
            }
            if (haha == 3)
            {
                var us = await Usertservice.getuserbyemail(UserName);
                var allroom = await Roomchatservice.getallbyidAsync(us.Id);
                string name = "Tư Vấn Gói :" + id;
                var rooms = allroom.FirstOrDefault(a => a.Name == name);
                if (rooms == null)
                {
                    roomchat room = new()
                        {
                            Name = "Tư Vấn Gói :" + id,
                            userid = us.Id,
                            ngaytao = DateTime.Now
                        };
                    var ro = await Roomchatservice.addAsync(room);
                    Chat ha = new()
                        {
                            data = "Tôi cần hỗ trợ cho gói: " + id,
                            roomchatid = ro.Id,
                            thoigian = DateTime.Now,
                            trangthai = 1,
                            userid = us.Id
                        };
                    await Chatservice.addAsync(ha);
                    navigation.NavigateTo("/Chat/" + ro.Id);
                }
                else
                {
                    navigation.NavigateTo("/Chat/" + rooms.Id);
                }
            }
        }
    }
    private async Task add()
    {
        err = "";
        if (iduser == 0)
        {
            err = "Vui lòng chọn người thân";
            return;
        }
        navigation.NavigateTo("/datlichNTid/" + iduser + ";" + goiint);
    }

    public async Task LoadAlLGoi()
    {
        var goi = await GXNservice.getallAsync();
        AllGoi.Clear();

        if (goi is null) return;

        totalPages = (int)Math.Ceiling((double)goi.Count / itemsPerPage);

        foreach (var g in goi.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage))
        {
            AllGoi.Add(g);
        }
        FilterGoi(); // Gọi phương thức FilterGoi() sau khi tải dữ liệu
    }
    private async Task ChangePage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages || pageNumber == currentPage)
        {
            return;
        }

        currentPage = pageNumber;
        await LoadAlLGoi();  // Gọi phương thức để load dữ liệu cho trang mới
        StateHasChanged();
    }
    private void FilterGoi()
    {
        FilteredGoi = AllGoi.Where(goi =>
        goi.TenGoi.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
        goi.Gia.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
        goi.ThoiGian.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
    }
    private void Search()
    {
        currentPage = 1; // Reset to the first page when performing a new search
        LoadAlLGoi();
    }
    private void layuser(int id)
    {
        iduser = id;
        user = alluser.FirstOrDefault(p => p.Id == id);
    }
    private String gioitinh(bool a)
    {
        if (a)
        {
            return "Nam";
        }
        else
        {
            return "Nữ";
        }
    }
}