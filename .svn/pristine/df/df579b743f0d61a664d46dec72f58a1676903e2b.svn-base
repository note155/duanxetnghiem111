@page "/AddGXN"
@rendermode InteractiveAuto
@inject NavigationManager navigation;
@layout AdminLayout
@attribute [Authorize]
<div class="container">
    <div class="col-md-8">
        <h2 class="mb-4">Thêm gói xét nghiệm</h2>
        <EditForm Model="Input" method="post" OnValidSubmit="add" FormName="register" class="profile-form">
            <DataAnnotationsValidator />
            <hr />
            @if (err.Any())
            {
                <div class="alert alert-danger" role="alert">
                    @foreach (var error in err)
                    {
                        <p>@error</p>
                    }
                </div>
            }
            <div class="mb-3">
                <label for="TenGoi" class="form-label">Tên gói</label>
                <InputText @bind-Value="Input.TenGoi" class="form-control" id="TenGoi" />
                <ValidationMessage For="() => Input.TenGoi" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="Gia" class="form-label">Giá</label>
                <InputNumber @bind-Value="Input.Gia" class="form-control" id="Gia" oninput="if(this.value < 0) this.value = 0" />
                <ValidationMessage For="@(() => Input.Gia)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="ThoiGian" class="form-label">Thời gian</label>
                <InputText @bind-Value="Input.ThoiGian" class="form-control" id="ThoiGian" />
                <ValidationMessage For="() => Input.ThoiGian" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="Mota" class="form-label">Mô tả</label>
                <InputTextArea @bind-Value="Input.Mota" class="form-control" id="Mota" />
                <ValidationMessage For="() => Input.Mota" class="text-danger" />
            </div>
            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary">Lưu</button>
                <a href="/listBS" class="btn btn-secondary">Hủy</a>
            </div>

        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public GoiXetNghiem Input { get; set; } = new();

    private List<string> err = new List<string>();
    protected override async Task OnInitializedAsync()
    {
        await checkbs();
    }
    public async Task checkbs()
    {
        var authState = await checkbss.GetAuthenticationStateAsync();
        var UserName = authState.User.Identity.Name;
        var bs = await bacsiservice.getbyemail(UserName);
        if (bs == null)
        {
            navigation.NavigateTo("/err");
        }
    }
    private async Task add()
    {
        err.Clear(); // Xóa thông báo lỗi cũ
        if (string.IsNullOrEmpty(Input.TenGoi))
        {
            err.Add("Tên gói không được để trống");
        }

        if (string.IsNullOrEmpty(Input.ThoiGian))
        {
            err.Add("Thời gian không được để trống");
        }

        if (err.Count == 0)
        {
            if (file == null)
            {
                Input.Anh = "img/1.jpg";
            }
            else
            {
                Input.Anh = file.Name;
            }
            await GXNservice.addAsync(Input);
            navigation.NavigateTo("/ListGXN");
        }
    }

    public IBrowserFile file;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }
}