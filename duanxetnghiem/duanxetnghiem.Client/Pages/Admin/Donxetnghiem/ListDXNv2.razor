@page "/Duyetdonv2/{getngay}"
@using Shared.form
@inject IJSRuntime JsRuntime;
@rendermode InteractiveAuto
@attribute [Authorize]
@layout AdminLayout
@using System.Globalization

<div class="row">
    <h2>Danh Sách Đơn Cần Duyệt Của Ngày @getngay</h2>
    @if (errloc != "")
    {
        <p style="color:red">Vui lòng chọn ngày</p>
    }
    <div class="col-sm-5 d-flex align-items-center">
        <!-- Thêm class d-flex và align-items-center -->
        <select class="form-select" @bind:event="oninput" @bind="@ngaychon">
            <option selected>Chọn Ngày</option>
            @foreach (var time in allNgayDat)
            {
                <option value="@time.ToString("dd-MM-yyyy")">@time.ToString("dd/MM/yyyy")</option>
            }
        </select>
        <button class="btn btn-info mx-3" @onclick="loc">Lọc</button> 
        
    </div>
</div>

<div id="bingMap" style="width: 100%; height: 400px;"></div>
<div id="infoWindow" class="infoWindow">
    <div id="infoContent"></div>
    <button class="btn btn-danger" id="closeBtn" onclick="toggleInfoWindowtat()">Đóng</button><button class="btn btn-success mx-3" @onclick="WriteToConsole">Thêm vào danh sách</button>
</div>
<div class="row" style="height:100px">
    <a style="width:auto" href="/ListDXN"><button class="btn btn-info">Danh sách</button></a> <a style="width:auto" @onclick="duyet"><button class="btn btn-info">Reload</button></a>

    <strong>Đang có @allDon.Count() cần được duyệt</strong>
</div>
<div class="row">
    @if (err.Any())
    {
        <div class="alert alert-danger" role="alert">
            @foreach (var error in err)
            {
                <p>@error</p>
            }
        </div>
    }
</div>
<EditForm Model="coDon" method="post" OnValidSubmit="add" FormName="register" class="profile-form">
    <DataAnnotationsValidator />
    <div class="row" style="border: 1px solid #000;padding: 10px;">
        <div class="col-sm-5">
            @if (Donachon.Any())
            {
                <div class="row">
                    <strong>Danh sách đơn đã chọn:</strong>
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Khách hàng</th>
                                <th>Thời gian</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var idd in Donachon)
                            {
                                <tr @onclick="()=>Donle(idd.dxn.Id)">
                                    <th scope="row">@idd.dxn.Id</th>
                                    <td>@idd.nguoi.Hoten</td>
                                    <td>@idd.dxn.giolaymau @idd.dxn.Ngaydat.ToString("dd/MM/yyyy")</td>
                                    <td><a style="color:red" @onclick="()=>remove(idd.dxn.Id)">x</a></td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
                <div class="row">
                    <strong>Chọn nhân viên lấy mẫu</strong>
                    <div class="form-group">
                        <input type="text" @bind="searchQuery" @oninput="OnSearchQueryChanged" list="staffList" placeholder="Tìm kiếm nhân viên" class="form-control" />
                        <datalist id="staffList">
                            @foreach (var bs in FilteredStaffMembers)
                            {
                                <option value="@($"{bs.Id} - {bs.Hoten} - {bs.Chucvu}")" data-id="@bs.Id"></option>
                            }
                        </datalist>
                        <input type="hidden" @bind="idbs" />
                    </div>
                    @if (SelectedDoctor != null)
                    {
                        <div class="row">
                            <strong>Thông tin nhân viên lấy mẫu</strong>
                            <div class="col-sm-4"><img src="@SelectedDoctor.Anh" style="width:100%"></div>
                            <div class="col-sm-8">
                                <p><strong>Họ tên:</strong> @SelectedDoctor.Hoten</p>
                                <p><strong>Chức vụ:</strong> @SelectedDoctor.Chucvu</p>
                                <p><strong>Số điện thoại:</strong> @SelectedDoctor.SDT</p>
                                <p><strong>Email:</strong> @SelectedDoctor.Email</p>
                            </div>

                        </div>
                    }

                    <button type="submit" class="btn btn-success">Duyệt toàn bộ đơn đã chọn</button>
                </div>
            }
            else
            {
                <p>Chưa có đơn nào được chọn</p>
            }
        </div>
        <div class="col-sm-7">
            @if (coDon.nguoi != null)
            {
                <div class="card ">
                    <div class="card-header">
                        THÔNG TIN ĐƠN ĐĂNG KÝ
                    </div>
                    <div class="card-body">
                        <h4 class="card-title">Khách hàng: @coDon.nguoi.Hoten</h4>
                        <p class="card-text"><strong>Địa chỉ: </strong> @coDon.diachi</p>
                        <p class="card-text"><strong>Giới tính: </strong> @gioitinh(coDon.nguoi.Gioitinh)</p>
                        <p class="card-text"><strong>Ngày sinh: </strong> @coDon.nguoi.Ngaysinh.ToString("dd/MM/yyyy")</p>
                        <h4 class="card-title">Thông tin liên lạc</h4>
                        <p class="card-text"><strong>SDT: </strong> @coDon.nguoi.SDT</p>
                        <p class="card-text"><strong>Email: </strong> @coDon.nguoi.Email</p>
                        <h4 class="card-title">Thông tin đăng ký</h4>
                        <div>
                            <div class="form-group">
                                <label for="Ngaydat">Ngày Lấy Máu</label>
                                <InputDate @bind-Value="coDon.dxn.Ngaydat" class="form-control" id="Ngaydat" />
                                <ValidationMessage For="() => coDon.dxn.Ngaydat" class="text-danger" />
                            </div>
                            <div class="form-group">
                                <label for="giolaymau">Giờ lấy máu</label>
                                <InputSelect id="giolaymau" @bind-Value="coDon.dxn.giolaymau" class="form-control">
                                    @if (timeList.Any())
                                    {
                                        @foreach (var time in timeList)
                                        {
                                            <option value="@time">@time</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-group">
                                <label for="ghiChu">Ghi chú của bệnh nhân</label>
                                <InputTextArea @bind-Value="coDon.dxn.ghiChu" class="form-control" id="ghiChu" />
                                <ValidationMessage For="() => coDon.dxn.ghiChu" class="text-danger" />
                            </div>
                        </div>
                        <div class="card" style="width: 18rem;">
                            <div class="card-header">
                                Các gói đã chọn
                            </div>
                            <ul class="list-group list-group-flush">
                                @foreach (var bs in coDon.gxndachon)
                                {
                                    <li @onclick="()=>mogoi(bs.Id)" data-toggle="modal" data-target="#myModal" class="list-group-item"><strong>Tên gói: </strong>@bs.TenGoi  -  <h5 style="color:forestgreen;">Giá:@bs.Gia</h5></li>
                                }
                            </ul>
                        </div>

                    </div>
                </div>
            }
        </div>
    </div>
</EditForm>
<div class="row" style="height:200px"></div>
@code {
    List<string> timeList = new();
    protected static int i { get; set; } = 0;
    protected static int icheck { get; set; } = 0;
    [JSInvokable]
    public static void CSCallBackMethodhaha(int content)
    {
        // Xử lý giá trị content ở đây
        Console.WriteLine(content);
        if (content != 0)
        {
            haha = content;
            if (kt)
            {
                icheck++;
                iddon.Add(haha);
                kt = false;
            }
        }
        i++;

    }
    [Parameter]
    public string getngay { get; set; }
    Boolean okgoi = false;
    string ngaychon = "";
    List<DateTime> allNgayDat { get; set; } = new();
    public static Boolean kt = false, hienthi = false;
    public static int haha { get; set; } = new();
    public List<DonXetNghiem> AllDXN { get; set; } = new();
    [SupplyParameterFromForm]
    public Don coDon { get; set; } = new();
    public List<Don> allDon { get; set; } = new();
    public List<Don> Donachon { get; set; } = new();
    public static List<int> iddon { get; set; } = new();// Khởi tạo namesave với một giá trị mặc định
    private List<string> err = new List<string>();
    int valor, idbs, idgoi = 0;
    private BacSi SelectedDoctor = null;
    public List<DXNandGXN> dxn { get; set; } = new();
    public long tongtien = 0;
    public List<GoiXetNghiem> allGXN { get; set; } = new();
    private string searchQuery = "";
    private List<BacSi> FilteredStaffMembers { get; set; } = new();
    public List<BacSi> AllBS { get; set; } = new();
    string errloc = "";
    protected override async Task OnInitializedAsync()
    {
        await checkbs();
        allGXN = await GXNservice.getallAsync();
        await LoadDon();
        AllBS = await bacsiservice.getallAsync();
        FilteredStaffMembers = AllBS;
        FilterStaffMembers();
        timeList = GenerateTimeList();

    }

    static List<string> GenerateTimeList()
    {
        List<string> timeList = new List<string>();

        // Tạo danh sách thời gian từ 05:30 đến 21:00
        TimeSpan time = TimeSpan.FromHours(5.5); // 05:30
        TimeSpan endTime = TimeSpan.FromHours(20.8); // 21:00
        while (time <= endTime)
        {
            string startTime = time.ToString(@"hh\:mm");
            string endTimeString = time.Add(TimeSpan.FromMinutes(15)).ToString(@"hh\:mm");
            string timeRange = $"{startTime} - {endTimeString}";
            timeList.Add(timeRange);
            time = time.Add(TimeSpan.FromMinutes(15)); // Tăng thêm 15 phút
        }

        return timeList;
    }
    public void duyet()
    {
        navigation.NavigateTo(navigation.Uri, true);
    }
    public void loc()
    {
        errloc = "";
        if (string.IsNullOrEmpty(ngaychon))
        {
            errloc = "1";
            return;
        }
        navigation.NavigateTo("/Duyetdonv2/" + ngaychon, true);
    }
    private void FilterStaffMembers()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            FilteredStaffMembers = AllBS; // If search query is empty, display all staff members
        }
        else
        {
            FilteredStaffMembers = AllBS.Where(bs => bs.Hoten.ToLower().Contains(searchQuery.ToLower())).ToList();
        }
    }
    public void remove(int iddonc)
    {
        var tt = Donachon.FirstOrDefault(a => a.dxn.Id == iddonc);
        Donachon.RemoveAll(a => a.dxn.Id == iddonc);
        iddon.Remove(iddonc);
        allDon.Add(tt);
        if (Donachon.Count() == 0)
        {
            coDon = new();
        }
    }
    public async Task LoadDon()
    {
        AllDXN.Clear();
        var DXN = await DXNservice.getallAsync();
        if (DXN is null) return;
        string[] formats = { "dd/MM/yyyy", "d/M/yyyy", "dd-MM-yyyy" };
        foreach (var student in DXN)
        {
            if (student.Trangthai == "Đã Chuyển Tiền")
            {
                AllDXN.Add(student);
            }
        }
        var ngay = AllDXN.Select(don => don.Ngaydat).ToList();
        allNgayDat = ngay
    .Select(date => date.Date)
    .Distinct()
    .ToList();
        if (DateTime.TryParseExact(getngay, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime searchDate))
        {
            // Filter AllDXN based on the search date
            AllDXN = AllDXN.Where(dx => dx.Ngaydat.Date == searchDate.Date).ToList();
        }
        allDon.Clear();
        foreach (var donxn in AllDXN)
        {
            var us = await Usertservice.getuserbyid(donxn.UserId);
            string dc = us.Diachi + ", " + us.CapXa + ", " + us.CapHuyen + ", Thừa Thiên Huế";

            Don a = new()
                {
                    dxn = donxn,
                    diachi = dc,
                    nguoi = us,
                };
            a.gxndachon = new List<GoiXetNghiem>();
            var gdc = await DXNservice.getallGXNAsync(a.dxn.Id);
            foreach (var g in gdc)
            {
                foreach (var goi in allGXN)
                {
                    if (goi.Id == g.GoiXetNghiemId)
                    {
                        a.gxndachon.Add(goi);
                    }
                }
            }
            allDon.Add(a);
        }
    }
    public void mogoi(int id)
    {
        okgoi = true;
        idgoi = id;
        StateHasChanged();
    }
    private async Task WriteToConsole()
    {
        kt = true;
        await JsRuntime.InvokeAsync<object>("CSMethod1", 0);
        Xulydon();
        if (coDon.diachi == null && Donachon.Count() >= 1)
        {
            coDon = Donachon.FirstOrDefault();
        }
        await JsRuntime.InvokeAsync<object>("toggleInfoWindowtat");
    }
    public async void Donle(int id)
    {
        coDon = Donachon.FirstOrDefault(a => a.dxn.Id == id);
    }
    private async Task add()
    {
        err.Clear(); // Xóa danh sách lỗi trước đó
                     // Kiểm tra ngày lấy máu
                     // Kiểm tra giờ lấy máu
        foreach (var duyetDon in Donachon)
        {
            if (string.IsNullOrWhiteSpace(duyetDon.dxn.giolaymau))
            {
                err.Add("Giờ lấy máu của Đơn" + duyetDon.dxn.Id + " không được để trống.");
            }
            if (duyetDon.gxndachon.Count == 0)
            {
                err.Add("Vui lòng chọn gói xét nghiệm.");
            }
            // Kiểm tra gói xét nghiệm
            // Kiểm tra nhân viên lấy máu
            if (idbs == 0)
            {
                err.Add("Vui lòng chọn nhân viên lấy máu.");
            }

            // Nếu có lỗi, hiển thị thông báo lỗi và không tiếp tục thực hiện việc cập nhật dữ liệu
            if (err.Any())
            {
                return;
            }
            duyetDon.dxn.BacSiId = idbs;
            duyetDon.dxn.Trangthai = "Chờ lấy mẫu";
            await DXNservice.updateAsync(duyetDon.dxn);
            Tinhtrang ttrang = new Tinhtrang
                {
                    DonXetNghiemId = duyetDon.dxn.Id,
                    thoigian = DateTime.Now,
                    trangthai = "Đơn đã được duyệt - Người lấy mẫu: Bs." + SelectedDoctor.Hoten
                };
            await TTrangservice.addAsync(ttrang);
        }
        Donachon.Clear();
        coDon = new();
        navigation.NavigateTo(navigation.Uri, true);
    }
    public async void Xulydon()
    {
        // Xóa tất cả các pushpin hiện có trên bản đồ

        // Cập nhật lại danh sách các điểm trên bản đồ với danh sách mới đã thêm vào danh sách chọn
        foreach (var id in iddon)
        {
            foreach (var a in allDon.ToList())
            {
                if (a.dxn.Id == id)
                {
                    Donachon.Add(a);
                    allDon.Remove(a);
                }
            }
        }
    }
    private async void LoadBSInfo(int id)
    {
        idbs = id;
        valor = id;
        if (id != 0)
        {
            SelectedDoctor = AllBS.FirstOrDefault(bs => bs.Id == id)!;
        }
    }
    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        FilterStaffMembers();
        string[] numbers = searchQuery.Split('-');

        if (numbers.Length >= 3)
        {
            LoadBSInfo(int.Parse(numbers[0]));
        }
    }
    private String gioitinh(bool a)
    {
        if (a)
        {
            return "Nam";
        }
        else
        {
            return "Nữ";
        }
    }
    public async Task checkbs()
    {
        var authState = await checkbss.GetAuthenticationStateAsync();
        var UserName = authState.User.Identity.Name;
        var bs = await bacsiservice.getbyemail(UserName);
        if (bs == null)
        {
            navigation.NavigateTo("/err");
        }
    }
}
<script>

    document.addEventListener("DOMContentLoaded", function () {
        initMap();
    });
    function initMap() {
        // Initialize map with center at Hue city
        var map = new Microsoft.Maps.Map(document.getElementById('bingMap'), {
            credentials: 'AvJeIjn2sAoBGbyZw0PImFkcys5P60orulBL-i8ArqPp96C4h2_CL2xmY0YuJehi',
            center: new Microsoft.Maps.Location(16.4637, 107.5909), // Coordinates of Huế city
            zoom: 12 // Zoom level (adjust as needed)
        });

        Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {
            var searchManager = new Microsoft.Maps.Search.SearchManager(map);
            // Geocode all addresses in the list
            @foreach (var address in allDon)
    {
        <text>
                    searchManager.geocode({
                        where: "@address.diachi",
                        callback: function (geocodeResult) {
                            if (geocodeResult && geocodeResult.results && geocodeResult.results.length > 0) {
                                var location = geocodeResult.results[0].location;
                                var pin = new Microsoft.Maps.Pushpin(location, {
                                    title: 'Địa chỉ',
                                    subTitle: "@address.nguoi.Hoten"
                                });
                                map.entities.push(pin);

                                Microsoft.Maps.Events.addHandler(pin, 'click', function () {
                                    var content = `<div class="alert alert-success"> <strong>Thông tin khách hàng: </strong>@address.nguoi.Hoten</div>
                                                                     <p><strong>Số điện thoại: </strong>@address.nguoi.SDT</p>
                                                                     <p><strong>Địa chỉ: </strong>@address.diachi</p>
                                                                     <p><strong>Email: </strong>@address.nguoi.Email</p>
                                                                     <p><strong>Thời gian: </strong>@address.dxn.giolaymau @address.dxn.Ngaydat.ToString("dd/MM/yyyy")</p>`;


                                    showInfoWindow(content);
                                    CSMethod1(@address.dxn.Id);
                                });
                            }
                        }
                    });
        </text>
    }
                            });

    }
    function CSMethod1(content) {
        DotNet.invokeMethodAsync('duanxetnghiem.Client', 'CSCallBackMethodhaha', content).then(data => {
            console.log(data);
        });
    }

    function toggleInfoWindow() {
        var infoWindow = document.getElementById("infoWindow");
        infoWindow.classList.toggle("show");
    }
    function toggleInfoWindowtat() {
        var infoContent = document.getElementById("infoContent");
        infoContent.innerHTML = "";
        toggleInfoWindow();
    }
    function showInfoWindow(content) {
        var infoContent = document.getElementById("infoContent");
        infoContent.innerHTML = content;
        toggleInfoWindow();
    }
</script>
<script src="https://www.bing.com/api/maps/mapcontrol?key=AvJeIjn2sAoBGbyZw0PImFkcys5P60orulBL-i8ArqPp96C4h2_CL2xmY0YuJehi&callback=initMap" async defer></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var form = document.getElementById("rejectForm");
        form.style.display = "none";
    });
</script>
<script>
    function toggleForm() {
        var form = document.getElementById("rejectForm");
        if (form.style.display === "none") {
            form.style.display = "block";
        } else {
            form.style.display = "none";
        }
    }
</script>
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            @if (okgoi)
            {
                <div class="modal-header">

                    <h4 class="modal-title">Gói xét nghiệm: @idgoi</h4>
                    <button style="width:auto;height:auto;color:black;" type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">

                    <CTDNT Id="@idgoi" />

                </div>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

