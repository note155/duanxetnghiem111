@page "/ListDXN"
@using duanxetnghiem.Client.Pages.Layout
@layout AdminLayout 
@inject NavigationManager NavigationManager
@attribute [Authorize]
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Đơn yêu cầu xét nghiệm </h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="package-list-filter" data-select2-id="select2-data-23-141k">
                        <div class="filter-container">
                            <a class="btn btn-success" role="button" data-toggle="collapse" href="#package-filter" aria-expanded="true">Bộ lọc <img src="boloc.png" alt="Filter Image" class="filter-image"></a>
                        </div>
                        <div class="package-filter-content collapse in" id="package-filter" data-select2-id="select2-data-package-filter" aria-expanded="true" style="">
                            <div class="form" data-select2-id="select2-data-22-48o7">
                                <EditForm Model="Ticket" method="post" OnValidSubmit="Search" FormName="register">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="text-danger" role="alert" />
                                    <div class="row align-items-center justify-content-center">
                                        <div class="col-sm-3 form-group">

                                            <InputSelect class="form-control"  @bind-Value="Ticket.que">
                                                <option value="0">Chọn quận/huyện</option>
                                                @foreach (var district in Districts)
                                                {
                                                    <option value="@district">@district</option>
                                                }
                                            </InputSelect>
                                        </div>

                                        <div class="col-sm-3 form-group">

                                            <div class="search-container d-flex">
                                                <InputText class="form-control"  @bind-Value="Ticket.tim" />
                                            </div>
                                        </div>
                                        <div class="col-sm-3 form-group">
                                            <div class="search-container d-flex">
                                                <button class="btn btn-primary ml-2" type="submit">Tìm kiếm</button>
                                                <a class="btn btn-secondary ml-2" href="ListDXN">Bỏ lọc</a>
                                            </div>
                                        </div>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                    <div id="searchResults" class="col-12" @ref="searchResultsRef">
                        @if (AllDXN.Any())
                        {
                            var sortedDXN = AllDXN
                            .OrderBy(dxn => dxn.User?.CapHuyen)
                            .ThenBy(dxn => dxn.User?.CapXa)
                            .ThenBy(dxn => dxn.Id);

                            var groupedDXN = AllDXN.GroupBy(dxn => new { CapHuyen = dxn.User?.CapHuyen ?? "Unknown" });

                            foreach (var capHuyenGroup in groupedDXN)
                            {
                                <br>
                                <div class="col-md-12" id="@($"district-{capHuyenGroup.Key.CapHuyen}")">
                                    <div class="card">
                                        <div class="card-header"></div>
                                        <h4 class="text-primary">@capHuyenGroup.Key.CapHuyen</h4> <!-- Use a different color for each CapHuyen group -->
                                        <hr /> <!-- Add a horizontal line to separate each CapHuyen group -->
                                        @foreach (var capXaGroup in capHuyenGroup.GroupBy(g => g.User?.CapXa))
                                        {
                                            <h5>@capXaGroup.Key</h5> <!-- Display CapXa as the sub-heading -->

                                            <div class="table-responsive">
                                                <table class="table table-striped table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>id</th>
                                                            <th>Họ Tên Khách Hàng</th>
                                                            <th>Trạng thái</th>
                                                            <th>Ngày lấy máu</th>
                                                            <th>Giờ lấy máu</th>
                                                            <th></th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var DXN in capXaGroup)
                                                        {
                                                            <tr>
                                                                <td>@DXN.Id</td>
                                                                <td>@loadhoten(DXN.UserId)</td>
                                                                <td>@DXN.Trangthai</td>
                                                                <td>@DXN.Ngaydat.ToString("dd/MM/yyyy")</td>
                                                                <td>@DXN.giolaymau</td>
                                                                <td>
                                                                    <a class="btn btn-success" href="/XetDuyetDXN/@DXN.Id">Duyệt</a>
                                                                </td>
                                                                <td>
                                                                    <a class="btn btn-danger" href="/TuChoiDXN/@DXN.Id">Từ Chối</a>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>

                                        }

                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="alert alert-info">rỗng....</div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
@code {
    public List<string> Districts { get; set; } = new List<string> { "Thành phố Huế", "Phong Điền", "Quảng Điền", "Hương Trà", "Phú Vang", "Hương Thủy", "Phú Lộc", "A Lưới", "Nam Đông" };
    string searchDistrict = "0";
    string searchCustomerName = "";
    public List<DonXetNghiem> AllDXN { get; set; } = new();
    public List<DonXetNghiem> DXN { get; set; } = new();
    public List<GoiXetNghiem> allGXN { get; set; } = new();
    public List<User> allUser { get; set; } = new();
    private ElementReference searchResultsRef = default(ElementReference);
    [SupplyParameterFromForm]
    private WebAssemblyTicket Ticket { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await checkbs();
        DXN = await DXNservice.getallAsync();
        await LoadAlLStudents();
        allGXN = await GXNservice.getallAsync();
        allUser = await Usertservice.getalluserAsync();
    }


    public async Task checkbs()
    {
        var authState = await checkbss.GetAuthenticationStateAsync();
        var UserName = authState.User.Identity.Name;
        var bs = await bacsiservice.getbyemail(UserName);
        if (bs == null)
        {
            navigation.NavigateTo("/err");
        }
    }
    public async Task LoadAlLStudents()
    {
        AllDXN.Clear();

        if (DXN is null) return;

        foreach (var student in DXN)
        {
            if ((searchDistrict == "0" || student.User?.CapHuyen == searchDistrict)
                && (string.IsNullOrEmpty(searchCustomerName) || student.User?.Hoten?.IndexOf(searchCustomerName, StringComparison.OrdinalIgnoreCase) >= 0) // Perform a fuzzy search
                && (student.Trangthai == "Chờ Thanh Toán" || student.Trangthai == "Đã Chuyển Tiền"))
            {
                AllDXN.Add(student);
            }
        }
    }

    public String loadGXN(int id)
    {
        foreach (var gxn in allGXN)
        {
            if (gxn.Id == id)
            {
                return gxn.TenGoi;
            }
        }
        return null;
    }
    public String loadhoten(int id)
    {
        foreach (var us in allUser)
        {
            if (us.Id == id)
            {
                return us.Hoten;
            }
        }
        return null;
    }
    private void Search()
    {
        searchDistrict = Ticket.que; // Update searchDistrict with the selected district
        searchCustomerName = Ticket.tim; // Update searchCustomerName with the entered customer name

        // Reload the list of examination requests based on the new search criteria
        LoadAlLStudents();
    }


    private class WebAssemblyTicket
    {
        public string que { get; set; }
        public string tim { get; set; }
    }
}
