@page "/TuChoiDXN/{id:int}"
@using Shared.Model
@rendermode InteractiveAuto
 @inject NavigationManager navigation;
 @layout AdminLayout
@attribute [Authorize]

<div class="patient-registration-container">
    <div class="patient-info">
        <h2>Thông tin bệnh nhân</h2>
        <div class="info">
            <p><strong>Họ tên:</strong> @user.Hoten</p>
            <p><strong>Ngày sinh:</strong> @user.Ngaysinh.ToString("dd/MM/yyyy")</p>
            <p><strong>Số điện thoại:</strong> @user.SDT</p>
            <p><strong>Địa chỉ:</strong> @user.Diachi</p>
            <p><strong>Email:</strong> @user.Email</p>
            <p><strong>Giới tính:</strong> @gioitinh(@user.Gioitinh)</p>
        </div>
    </div>

    <div class="test-registration-form">
        <h2>Thông tin đơn đăng ký xét nghiệm</h2>
        <EditForm Model="Input" method="post" OnValidSubmit="add" FormName="register" class="profile-form">
            <DataAnnotationsValidator />
            <hr />

           
            <div class="form-group">
                <label for="ngaytaodon">Ngày tạo đơn</label>
                <InputDate @bind-Value="Input.ngaytaodon" class="form-control" id="Ngaytaodon" readonly />
                <ValidationMessage For="() => Input.ngaytaodon" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="Ngaydat">Ngày Lấy Máu</label>
                <InputDate @bind-Value="Input.Ngaydat" class="form-control" id="Ngaydat" min="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
                <ValidationMessage For="() => Input.Ngaydat" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="giolaymau">Giờ lấy máu</label>
                <InputText @bind-Value="Input.giolaymau" class="form-control" id="giolaymau" readonly />
                <ValidationMessage For="() => Input.giolaymau" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="ghiChu">Ghi chú của bệnh nhân</label>
                <InputTextArea @bind-Value="Input.ghiChu" class="form-control" id="ghiChu" readonly />
                <ValidationMessage For="() => Input.ghiChu" class="text-danger" />
            </div>

        </EditForm>
        <div class="doctor-info">
            <div class="selected-packages-header">
                <h3>Các gói đã chọn:</h3>
            </div>
            <div class="selected-packages">
                @foreach (var bs in gxndachon)
                {
                    <div class="package">
                        <div class="package-content">
                            <p><strong>Tên Gói:</strong> @bs.TenGoi</p>
                            <div class="price">Giá: @bs.Gia VND</div>
                        </div>
                    </div>
                }
            </div>
            <div class="total-mobile">
                <p>Tổng tiền: <span class="total">@tongtien VND</span></p>
            </div>
        </div>
        <EditForm Model="Xoadxn" method="post" OnValidSubmit="xoa" FormName="register">
            <DataAnnotationsValidator />
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <h2>Từ Chối</h2>
            <div class="form-group">
                <label for="Lydo">Lý Do Từ Chối :</label>
                <InputSelect ValueChanged="@((String value)=>LoadBSInfo(value))" ValueExpression="@(()=>valor)" Value="valor" class="form-control" id="Lydo">
                    <option value="">Chọn Lý Do</option>
                    <option value="Thông tin không phù hợp">Thông tin không phù hợp</option>
                    <option value="Không có nhân viên phù hợp">Không có nhân viên phù hợp</option>
                    <option value="Hạn chế về thời gian hoặc vị trí">Hạn chế về thời gian hoặc vị trí</option>
                    <option value="Không thể xác định địa chỉ cụ thể">Không thể xác định địa chỉ cụ thể</option>
                    <option value="Yêu cầu hủy bỏ từ bên đăng ký">Yêu cầu hủy bỏ từ bên đăng ký</option>
                    <option value="0">Khác</option>
                </InputSelect>
            </div>
            @if(@idbs=="0")
            {
                @if (err.Any())
                {
                    <div class="alert alert-danger" role="alert">
                        @foreach (var error in err)
                        {
                            <p>@error</p>
                        }
                    </div>
                }
            <div class="form-group">
                <label for="ngaytaodon">Lý Do Khác:</label>
                <InputText @bind-Value="Xoadxn.Lydo" class="form-control" id="Lydo" />
                <ValidationMessage For="() =>Xoadxn.Lydo" class="text-danger" />
            </div>
            }
            <a href="/ListDXN"><button style="background-color:black" class="btn btn-primary"> Hủy </button></a>
            <button type="submit" class="btn btn-primary">Từ Chối</button>
        </EditForm>
    </div>
</div>
@code {
    private List<string> err = new List<string>();
    private User user = new User();
    public List<GoiXetNghiem> allGXN { get; set; } = new();
    string valor, idbs;
    public List<GoiXetNghiem> gxndachon { get; set; } = new();
    public List<DXNandGXN> dxn { get; set; } = new();
    public long tongtien = 0;

    [SupplyParameterFromForm]
    public DonXetNghiem Input { get; set; } = new();

    [SupplyParameterFromForm]
    public TuChoi Xoadxn { get; set; } = new();

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await checkbs();
        Input = await DXNservice.getbyid(id);
        user = await Usertservice.getuserbyid(Input.UserId);
        allGXN = await GXNservice.getallAsync();
        dxn = await DXNservice.getallGXNAsync(id);
        loadgxndachon();
    }
    public async Task checkbs()
    {
        var authState = await checkbss.GetAuthenticationStateAsync();
        var UserName = authState.User.Identity.Name;
        var bs = await bacsiservice.getbyemail(UserName);
        if (bs == null)
        {
            navigation.NavigateTo("/err");
        }
    }
    private void loadgxndachon()
    {
        foreach (var a in dxn)
        {

            foreach (var b in allGXN)
            {
                if (b.Id == a.GoiXetNghiemId)
                {
                    gxndachon.Add(b);
                    tongtien += b.Gia;
                }
            }
            allGXN.RemoveAll(item => item.Id == a.GoiXetNghiemId);
        }
    }
    private async Task add()
    {

    }
    private async Task xoa()
    {
        err.Clear();
        if (idbs != "0")
        {
            Xoadxn.Lydo = valor;
        }
        if (string.IsNullOrWhiteSpace(Xoadxn.Lydo))
        {
            err.Add("Vui Lòng Nhập Lý Do");
            return;
        }

        Xoadxn.DonXetNghiemId = id;
        Input.Trangthai = "Từ Chối";
        var tt = await TTservice.getbyidDXNAsync(id);
        await TTservice.deleteAsync(tt.Id);
        await DXNservice.updateAsync(Input);
        await TCservice.addAsync(Xoadxn);
        Tinhtrang ttrang = new Tinhtrang
            {
                DonXetNghiemId = Input.Id,
                thoigian = DateTime.Now,
                trangthai = "Đơn bị từ chối - lý do: "+Xoadxn.Lydo 
            };
        await TTrangservice.addAsync(ttrang);
        navigation.NavigateTo("/ListDXN");
    }
    public String loadGXN(int id)
    {
        foreach (var gxn in allGXN)
        {
            if (gxn.Id == id)
            {
                return gxn.TenGoi;
            }
        }
        return null;
    }
    private String gioitinh(bool a)
    {
        if (a)
        {
            return "Nam";
        }
        else
        {
            return "Nữ";
        }
    }
    private void LoadBSInfo(string id)
    {
        idbs = id;
        valor = id;
    }
}
