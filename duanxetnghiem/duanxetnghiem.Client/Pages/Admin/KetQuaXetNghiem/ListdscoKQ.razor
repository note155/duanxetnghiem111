@page "/listdscoKQ"
@inject NavigationManager navigation;
@attribute [Authorize]
@layout AdminLayout
@using System.Globalization
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Danh sách đơn có kết quả</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <EditForm Model="Inputkq" method="post" OnValidSubmit="timkiem" FormName="register">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <InputText @bind-Value="Inputkq" placeholder="tìm kiếm" />
                        <ValidationMessage For="() => Inputkq" class="text-danger" />
                        <button type="submit" class=" btn-success">Tìm kiếm</button> <!-- Updated button class -->
                    </EditForm>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (!AllDXN.Any())
                            {
                                <p><em>Loading ...</em></p>
                            }
                            @if (AllDXN.Any())
                            {
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>ID</th>
                                                    <th>Họ Tên Khách Hàng</th>
                                                    <th>Trạng thái</th>
                                                    <th>Ngày có kết quả </th>
                                                    <th>Khoa </th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var DXN in AllDXN)
                                                {
                                                    foreach (var kq in allKQ)
                                                    {
                                                        if (DXN.Id == kq.DonXetNghiemId)
                                                        {
                                                            <tr>
                                                                <td>@DXN.Id</td>
                                                                <td>@loadhoten(DXN.UserId)</td>>
                                                                <td>@DXN.Trangthai</td>
                                                                <td>@kq.ngaycoKQ</td>
                                                                <td>@loadkhoa(kq.khoaId)</td>
                                                                <td>
                                                                    <a class="btn btn-success" href="/xemKQXN/@DXN.Id"> Xem kết quả </a>
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">Rỗng.....</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public List<DonXetNghiem> AllDXN { get; set; } = new();
    public List<User> allUser { get; set; } = new();
    public List<KetQuaXetNghiem> allKQ { get; set; } = new();
    public List<Khoa> allkhoa { get; set; } = new();

    [SupplyParameterFromForm]
    public String Inputkq { get; set; } = new("");
    protected override async Task OnInitializedAsync()
    {
        await checkbs();
        await LoadAlLStudents();
        allUser = await Usertservice.getalluserAsync();
        allKQ = await KQXNservice.getallAsync();
        allkhoa = await Khoaservice.getallAsync();
    }
    public async Task checkbs()
    {
        var authState = await checkbss.GetAuthenticationStateAsync();
        var UserName = authState.User.Identity.Name;
        var bs = await bacsiservice.getbyemail(UserName);
        if (bs == null)
        {
            navigation.NavigateTo("/err");
        }
    }

    private string loadkhoa(int id)
    {
        foreach (var i in allkhoa)
        {
            if (i.Id == id)
            {
                return i.ten;
            }
        }
        return null;
    }
    public async Task LoadAlLStudents()
    {
        // var students = await GenericService.GetAllAsync(student, "api/Student/All-Students");
        var DXN = await DXNservice.getallAsync();
        AllDXN.Clear();

        if (DXN is null) return;
        foreach (var student in DXN)
        {
            if (student.Trangthai == "Hoàn thành")
            {
                AllDXN.Add(student);
            }
        }
    }
    public String loadhoten(int id)
    {
        foreach (var us in allUser)
        {
            if (us.Id == id)
            {
                return us.Hoten;
            }
        }
        return null;
    }
    private async Task timkiem()
    {
        if (string.IsNullOrEmpty(Inputkq))
        {
            await LoadAlLStudents(); // Load all students if search query is empty
        }
        else
        {
            // Define array of formats to parse the search query
            string[] formats = { "dd/MM/yyyy", "d/M/yyyy" };

            // Parse the search query as a date with multiple formats
            if (DateTime.TryParseExact(Inputkq, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime searchDate))
            {
                // Filter AllDXN based on the search date
                AllDXN = AllDXN.Where(dx => dx.Ngaydat.Date == searchDate.Date).ToList();
            }
            else if (int.TryParse(Inputkq, out int searchId)) // Check if Inputkq can be parsed as an integer
            {
                // Filter AllDXN based on the ID
                AllDXN = AllDXN.Where(dx => dx.Id == searchId).ToList();
            }
            else
            {
                // Filter AllDXN based on customer's name or doctor's name
                AllDXN = AllDXN.Where(dx => loadhoten(dx.UserId).Contains(Inputkq, StringComparison.OrdinalIgnoreCase)).ToList();
            }
        }
    }

}
