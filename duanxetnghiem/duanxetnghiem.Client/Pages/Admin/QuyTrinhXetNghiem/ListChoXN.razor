@page "/ListchoXN"
@using System.Globalization
@attribute [Authorize]
@layout AdminLayout
@rendermode InteractiveAuto
@using BlazorBarcodeScanner.ZXing.JS
<button class="btn btn-info" id="myBtn" onclick="focusInput" style="margin-top:-90px;height:50px;margin-bottom:5px;background:red;font-size:16px;">Quét mã</button>
<!-- The Modal -->
<div id="myModal" class="modal">
    <!-- Modal content -->
    <div class="modal-content">
        <span class="close">&times;</span>
        @haha
        <input @bind:event="oninput" @bind="haha" type="text" id="myInput" class="hidden-input">
        <h2>Sử Dụng Máy Quét Hoặc Camera</h2>
        <button class="btn btn-info" @onclick="mocam">@cam</button>
        <h3 style="color:red">@huhu</h3>
        @if (cam == "Đóng Camera")
        {
            <BlazorBarcodeScanner.ZXing.JS.BarcodeReader Title="Quét Mã"
                                                         StartCameraAutomatically="true"
                                                         ShowStart="true"
                                                         ShowReset="true"
                                                         ShowToggleTorch="true"
                                                         ShowVideoDeviceList="true"
                                                         VideoWidth="500"
                                                         VideoHeight="400"
                                                         OnBarcodeReceived="LocalReceivedBarcodeText" />
        }
        else
        {
            quetmay();
        }
    </div>
</div>

<div class="row" style="margin-top:-30px;">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h1 class="card-title">Xác nhận nhận mẫu máu</h1>
            </div>
            <div class="card-body">
                <div class="row">
                    <EditForm Model="Inputkq" method="post" OnValidSubmit="timkiem" FormName="register">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <InputText @bind-Value="Inputkq" placeholder="Tìm kiếm" class="input-search" style="height:40px;border-radius:5px;width:200px;" />
                        <ValidationMessage For="() => Inputkq" class="text-danger" />
                        <button type="submit" class=" btn btn-success btn-search" style="background-color: #007eff;"><i class="fas fa-search"></i></button> <!-- Updated button class -->
                    </EditForm>
                    <div class="col-md-12">
                        <div class="card">

                            @if (!AllDXN.Any())
                            {
                                <p><em>Loading ...</em></p>
                            }
                            @if (AllDXN.Any())
                            {
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>ID</th>
                                                    <th>Họ Tên Khách Hàng</th>
                                                    <th>Trạng thái</th>
                                                    <th>Ngày lấy máu </th>
                                                    <th>Giờ lấy máu </th>
                                                    <th>Bác sĩ đảm nhận</th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var DXN in AllDXN)
                                                {
                                                    var bs = laybs(@DXN.BacSiId);
                                                    <tr>
                                                        <td>@DXN.Id</td>
                                                        <td>@loadhoten(DXN.UserId)</td>
                                                        <td>@DXN.Trangthai</td>
                                                        <td>@DXN.Ngaydat.ToString("dd/MM/yyyy")</td>
                                                        <td>@DXN.giolaymau</td>
                                                        <td class="doctor-info">
                                                            <img src="@bs.Anh" alt="@bs.Hoten">
                                                            <span>@bs.Hoten</span>
                                                        </td>
                                                        <td>
                                                            <a class="btn btn-success" href="/XNNM/@DXN.Id">Xác Nhận </a>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info"> Rỗng.....</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public List<DonXetNghiem> AllDXN { get; set; } = new();
    public List<BacSi> allBS { get; set; } = new();
    public List<User> allUser { get; set; } = new();
    [SupplyParameterFromForm]
    public String Inputkq { get; set; } = new("");
    string haha = "", huhu = "";
    string cam = "Mở Camera";
    protected override async Task OnInitializedAsync()
    {
        await checkbs();
        await LoadAlLStudents();
        allUser = await Usertservice.getalluserAsync();
        allBS = await bacsiservice.getallAsync();
    }
    public async Task checkbs()
    {
        var authState = await checkbss.GetAuthenticationStateAsync();
        var UserName = authState.User.Identity.Name;
        var bs = await bacsiservice.getbyemail(UserName);
        if (bs == null)
        {
            navigation.NavigateTo("/err");
        }
    }
    public void quetmay()
    {
        huhu = "";
        if (haha != "")
        {
            foreach (var s in AllDXN)
            {
                if (s.Id == int.Parse(haha))
                {
                    navigation.NavigateTo("/XNNM/" + haha);
                }
            }
            huhu = "Lỗi: Không tìm thấy đơn trong hệ thống cần xác nhận";
        }
    }
    public void mocam()
    {
        if (cam == "Mở Camera")
        {
            cam = "Đóng Camera";
        }
        else
        {
            cam = "Mở Camera";
        }
    }

    public async Task LoadAlLStudents()
    {
        var DXN = await DXNservice.getallAsync();
        AllDXN.Clear();

        if (DXN is null) return;
        foreach (var student in DXN)
        {
            if (student.Trangthai == "Đã Lấy Mẫu")
            {
                AllDXN.Add(student);
            }
        }
    }

    public BacSi laybs(int? id)
    {
        var bs = allBS.FirstOrDefault(b => b.Id == id);
        return bs;
    }
    public String loadhoten(int id)
    {
        foreach (var us in allUser)
        {
            if (us.Id == id)
            {
                return us.Hoten;
            }
        }
        return null;
    }
    private async Task timkiem()
    {
        if (string.IsNullOrEmpty(Inputkq))
        {
            await LoadAlLStudents(); // Load all students if search query is empty
        }
        else
        {
            // Check if the search input is a valid ID
            if (int.TryParse(Inputkq, out int searchId))
            {
                // Filter AllDXN based on the search ID
                AllDXN = AllDXN.Where(dx => dx.Id == searchId).ToList();
            }
            else
            {
                // Define array of formats to parse the search query as a date
                string[] formats = { "dd/MM/yyyy", "d/M/yyyy" };

                // Parse the search query as a date with multiple formats
                if (DateTime.TryParseExact(Inputkq, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime searchDate))
                {
                    // Filter AllDXN based on the search date
                    AllDXN = AllDXN.Where(dx => dx.Ngaydat.Date == searchDate.Date).ToList();
                }
                else
                {
                    // Filter AllDXN based on customer's name, doctor's name, or ID
                    AllDXN = AllDXN.Where(dx => dx.Id.ToString().Contains(Inputkq) ||
                                                 loadhoten(dx.UserId).Contains(Inputkq, StringComparison.OrdinalIgnoreCase) ||
                                                 laybs(dx.BacSiId)?.Hoten.Contains(Inputkq, StringComparison.OrdinalIgnoreCase) == true).ToList();
                }
            }
        }
    }
    private void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {
        this.haha = args.BarcodeText;
        huhu = "";
        if (haha != "")
        {
            foreach (var s in AllDXN)
            {
                if (s.Id == int.Parse(haha))
                {
                    navigation.NavigateTo("/XNNM/" + haha);
                }
            }
            huhu = "Lỗi: Không tìm thấy đơn trong hệ thống cần xác nhận";
        }
        StateHasChanged();
    }
}
<script>
    // Get the modal
    var modal = document.getElementById("myModal");

    // Get the button that opens the modal
    var btn = document.getElementById("myBtn");

    // Get the input field
    var inputField = document.getElementById("myInput");

    // When the user clicks the button, open the modal and focus on the input field
    btn.onclick = function () {
        modal.style.display = "block";
        inputField.focus(); // Set focus on the input field
    }

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
</script>


