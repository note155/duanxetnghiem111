@page "/giohang"
@using Shared.Model
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.Authorization
@using Shared.form
@inject NavigationManager navigation;
@attribute [Authorize]

<h1>Đơn Xét Nghiệm</h1>
@if (ChuaChonGoi)
{
    <div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thông báo</h5>
                    <button type="button" class="btn-close" @onclick="(() => ChuaChonGoi = false)"></button>
                </div>
                <div class="modal-body">
                    Bạn chưa chọn gói xét nghiệm nào.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="(() => ChuaChonGoi = false)">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!gioHangList.Any())
{
    <p>Đơn xét nghiệm của bạn đang trống</p>
}
@if (gioHangList.Any())
{
    <button class="btn btn-danger" @onclick="DeleteSelected">Xóa các mục được chọn</button>
    <table class="table table-striped mt-3">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Chọn</th> <!-- Thêm cột chọn -->
                <th scope="col">Gói xét nghiệm</th>
                <th scope="col">Giá</th>
                <th scope="col">Thời Gian</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ghang in gioHangt.ToList())
            {
                <tr>
                    <td><input type="checkbox" @bind="ghang.IsSelected" /></td>
                    <td>@ghang.TenGoiXetNghiem</td>
                    <td>@ghang.Gia</td>
                    <td>@ghang.ThoiGian</td>
                </tr>
            }
        </tbody>
    </table>
    <a class="btn btn-secondary float-end mt-3" @onclick="@(() => add(1))"> Tạo đơn cho bản thân</a>
    <a class="btn btn-success float-end mt-3 mx-3" @onclick="@(() => add(2))"> Tạo đơn cho người thân</a>
    <br>
    <p class="total-amount">Tổng tiền: @TinhTongTien() VND</p>

   
}
else
{
    
}


@code {
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    public List<GioHang> gioHangList { get; set; } = new();
    public List<GioHang> gh { get; set; } = new();
    public List<giohangtam> gioHangt { get; set; } = new();
    public string UserName { get; set; }
    public User user { get; set; } = new();
    public giohangtam aa = new();
    Dictionary<int, GoiXetNghiem> goiXetNghiemDict = new Dictionary<int, GoiXetNghiem>();
    public bool ChuaChonGoi = false;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Identity.Name;
        user = await Usertservice.getuserbyemail(UserName);
        if (user == null)
        {
            navigation.NavigateTo("/AddUser");
        }
        gioHangList = await GHservice.getallAsyncbyiduser(user.Id);
        if (gioHangList != null)
        {
            var allGXN = await GXNservice.getallAsync();
            foreach (var gxn in allGXN)
            {
                goiXetNghiemDict[gxn.Id] = gxn;
            }
            gh = await GHservice.getallistrue(user.Id);
            removegh();
            LoadAllStudents();
        }
        else
        {
            // Handle the case where gioHangList is null
            // For example, display a message to the user
        }

    }
    private async void removegh()
    {
        foreach (var a in gh)
        {
            a.IsSelected = false;
            await GHservice.updateAsync(a);
        }
    }
    private async void add(int i)
    {
        var itemsToRemove = gioHangt.Where(student => student.IsSelected == true).ToList();
        if (itemsToRemove.Count == 0)
        {
            ChuaChonGoi = true;
            return;
        }
        foreach (var student in itemsToRemove)
        {
            GioHang a = new GioHang
                {
                    Id=student.Id,
                    UserId = student.UserId,
                    GoiXetNghiemId = student.GoiXetNghiemId,
                    IsSelected = student.IsSelected
                };
            await GHservice.updateAsync(a);
        }
        if (i == 1)
        {
            navigation.NavigateTo("/datlichGH");
        }
        if(i == 2)
        {
            navigation.NavigateTo("/datlichCNTGH");
        }
    }
    public void LoadAllStudents()
    {
        gioHangt.Clear();
        foreach (var student in gioHangList)
        {
            gioHangt.Add(new giohangtam
                {
                    Id = student.Id,
                    UserId = student.UserId,
                    GoiXetNghiemId = student.GoiXetNghiemId,
                    IsSelected = false,
                    TenGoiXetNghiem = GetGoiXetNghiemName(student.GoiXetNghiemId),
                    Gia = GetGia(student.GoiXetNghiemId),
                    ThoiGian = GetThoiGian(student.GoiXetNghiemId)
                });
        }
    }

    private async void DeleteSelected()
    {
        var itemsToRemove = gioHangt.Where(student => student.IsSelected==true).ToList();
        foreach (var student in itemsToRemove)
        {
            gioHangt.Remove(student);
            gioHangList.RemoveAll(item => item.Id == student.Id);
            await GHservice.deleteAsync(student.Id);
            navigation.NavigateTo(navigation.Uri, true);
        }

    }

    public string GetGoiXetNghiemName(int id) => goiXetNghiemDict.ContainsKey(id) ? goiXetNghiemDict[id].TenGoi : null;
    public long GetGia(int id) => goiXetNghiemDict.ContainsKey(id) ? goiXetNghiemDict[id].Gia : 0;
    public string GetThoiGian(int id) => goiXetNghiemDict.ContainsKey(id) ? goiXetNghiemDict[id].ThoiGian : null;

    public long? TinhTongTien()
    {
        long? tongTien = 0;
        foreach (var item in gioHangt)
        {
            if (item.IsSelected==true)
            {
                tongTien += item.Gia;
            }
        }
        return tongTien;
    }
}
