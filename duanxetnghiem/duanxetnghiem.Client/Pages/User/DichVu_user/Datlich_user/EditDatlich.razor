@page "/EditDL/{id:int}"
@using Shared.form
@rendermode InteractiveAuto
@inject NavigationManager navigation;
@attribute [Authorize]
<EditForm Model="Input" method="post" OnValidSubmit="add" FormName="register" class="profile-form">
    <DataAnnotationsValidator />
    <hr />

    @if (err.Any())
    {
        <div class="alert alert-danger" role="alert">
            @foreach (var error in err)
            {
                <p>@error</p>
            }
        </div>
    }
    <div class="patient-registration-container">
        <div class="patient-info-container">
            <div class="patient-info">
                <h2>Thông tin bệnh nhân</h2>
                @if (user != null)
                {
                    <div class="info">
                        <p><strong>Họ tên:</strong> @user.Hoten</p>
                        <p><strong>Ngày sinh:</strong> @user.Ngaysinh.ToString("dd/MM/yyyy")</p>
                        <p><strong>Số điện thoại:</strong> @user.SDT</p>
                        <p><strong>Địa chỉ:</strong> @user.Diachi, @user.CapXa, @user.CapHuyen, TT Huế</p>
                        <p><strong>Email:</strong> @user.Email</p>
                        <p><strong>Giới tính:</strong> @gioitinh(@user.Gioitinh)</p>
                    </div>
                }
            </div>
            <div class="patient-info">
                @if (err.Any())
                {
                    <div class="alert alert-danger" role="alert">
                        @foreach (var error in err)
                        {
                            <p>@error</p>
                        }
                    </div>
                }
                <h2>Các gói xét nghiệm</h2>
                <div class="info" style="height: 360px; overflow-y: auto;">
                    <table>
                        @foreach (var ds in listgxn)
                        {
                            <tr>
                                <td><input type="checkbox" @onchange="@(() => LoadBSInfo(ds.Id))" checked="@ds.IsSelected" /></td>
                                <td>@ds.TenGoi</td>
                                <td>@ds.Gia</td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
        <div class="test-registration-form">
            <h2>Đơn đăng ký đặt lịch xét nghiệm</h2>
            <div class="form-group">
                <label for="Ngaydat">Ngày Lấy Máu <span style="color:red">*</span></label>
                <InputDate @bind-Value="Input.Ngaydat" class="form-control" id="Ngaydat" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                <ValidationMessage For="() => Input.Ngaydat" class="text-danger" />
            </div>
            @{
                GenerateTimeList();
            }
            <div class="form-group">
                <label for="giolaymau">Giờ lấy máu <span style="color:red">*</span></label>
                <InputSelect id="giolaymau" @bind-Value="Input.giolaymau" class="form-control">
                    <option value="">Chọn</option>
                    @if (timeList.Any())
                    {
                        @foreach (var time in timeList)
                        {
                            <option value="@time">@time</option>
                        }
                    }
                    <ValidationMessage For="() => Input.giolaymau" class="text-danger" />
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="ghiChu">Ghi chú </label>
                <InputTextArea @bind-Value="Input.ghiChu" class="form-control" id="ghiChu" />
                <ValidationMessage For="() => Input.ghiChu" class="text-danger" />
            </div>
            <div class="doctor-info">
                <div class="table-users">
                    <div class="header">Các gói đã chọn</div>

                    <table cellspacing="0" class="custom-table">
                        @if (gxndachon.Any())
                        {
                            <tr>
                                <th>Tên gói</th>
                                <th>Giá</th>
                                <th></th>
                            </tr>

                            @foreach (var bs in gxndachon)
                            {
                                <tr>
                                    <td><strong>Tên Gói:</strong> @bs.TenGoi</td>
                                    <td><div class="price">Giá: @bs.Gia VND</div></td>
                                    <td>
                                        <button type="button" @onclick="@( () => remove(bs.Id) )" class="remove-btn">X</button>
                                    </td>
                                </tr>
                            }
                        }
                        <tr>
                            <td colspan="3">Tổng tiền: <span class="total">@tongtien VND</span></td>
                        </tr>
                    </table>
                </div>
            </div>
            <a href="/"><button style="background-color:red" class="btn btn-primary"> Hủy </button></a>
            <button type="submit" class="btn btn-primary">Sửa</button>
        </div>
    </div>
</EditForm>

@code {
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    private List<GoiXetNghiem> previousGxndachon = new List<GoiXetNghiem>();
    private List<string> err = new List<string>();
    private User user = new User();
    public List<GoiXetNghiem> allGXN { get; set; } = new();
    public List<BacSi> AllBS { get; set; } = new();
    public string UserName { get; set; }
    public List<GoiXetNghiem> gxndachon { get; set; } = new();
    public List<GXNchon> listgxn { get; set; } = new();
    int valor = 0, idbs;
    public long tongtien = 0;
    List<string> timeList = new();
    public DonXetNghiem donxnd { get; set; } = new();
    public List<DXNandGXN> dxn { get; set; } = new();
    [SupplyParameterFromForm]
    public donXNform Input { get; set; } = new();
    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Identity.Name;
        user = await Usertservice.getuserbyemail(UserName);
        if (user == null)
        {
            navigation.NavigateTo("/AddUser");
        }
        allGXN = await GXNservice.getallAsync();
        getds();
        donxnd = await DXNservice.getbyid(id);
        Input.giolaymau = donxnd.giolaymau;
        Input.Ngaydat = donxnd.Ngaydat;
        Input.ghiChu = donxnd.ghiChu;
        dxn = await DXNservice.getallGXNAsync(id);
        GenerateTimeList();
        foreach (var g in dxn)
        {
            foreach(var gxn in allGXN)
            {
                if (gxn.Id == g.GoiXetNghiemId)
                {
                    gxndachon.Add(gxn);
                    tongtien += gxn.Gia;
                }
            }
        }
        foreach (var a in listgxn)
        {
            foreach (var g in dxn)
            {
                if (a.Id == g.GoiXetNghiemId)
                {
                    a.IsSelected = true;
                }    
            }
        }
        previousGxndachon = new List<GoiXetNghiem>(gxndachon);
    }
    private void getds()
    {
        listgxn.Clear();
        foreach (var a in allGXN)
        {
            listgxn.Add(new GXNchon
                {
                    Id = a.Id,
                    IsSelected = false,
                    Anh = a.Anh,
                    TenGoi = a.TenGoi,
                    Gia = a.Gia,
                    Mota = a.Mota,
                    ThoiGian = a.ThoiGian
                });
        }

    }
    private void remove(int id)
    {
        foreach (var gxn in gxndachon)
        {
            if (gxn.Id == id)
            {
                allGXN.Add(gxn);
                tongtien -= gxn.Gia;
            }
        }
        foreach (var gxn in listgxn)
        {
            if (gxn.Id == id)
            {
                gxn.IsSelected = false;
            }
        }
        gxndachon.RemoveAll(item => item.Id == id);

    }
    private async Task add()
    {
        err.Clear(); // Xóa danh sách lỗi trước đó
                     // Kiểm tra ngày lấy máu
                     // Kiểm tra giờ lấy máu

        if (string.IsNullOrWhiteSpace(Input.giolaymau))
        {
            err.Add("Giờ lấy máu không được để trống.");
        }
        if (gxndachon.Count == 0)
        {
            err.Add("Vui lòng chọn gói xét nghiệm.");
        }
        if (err.Any())
        {
            keolen();
            return;
        }
        donxnd.giolaymau= Input.giolaymau;
        donxnd.Ngaydat = Input.Ngaydat;
        donxnd.ghiChu = Input.ghiChu;
        await DXNservice.updateAsync(donxnd);

        ThanhToan tt = await TTservice.getbyidDXNAsync(id);
        tt.Tongtien = tongtien;
        await TTservice.updateAsync(tt);
        foreach (var newItem in gxndachon.Except(previousGxndachon))
        {
            DXNandGXN a = new DXNandGXN
                {
                    DonXetNghiemId = id,
                    GoiXetNghiemId = newItem.Id
                };
            await DXNservice.addnew(a);
        }

        foreach (var removedItem in previousGxndachon.Except(gxndachon))
        {
            // removedItem là phần tử đã bị xóa
            // Thực hiện hành động tương ứng, ví dụ: xóa khỏi cơ sở dữ liệu
            foreach (var a in dxn)
            {
                if (a.GoiXetNghiemId == removedItem.Id)
                {
                    await DXNservice.deletegxnAsync(a.Id);
                }
            }
        }

        navigation.NavigateTo("/giohangdxn");
    }
    public String loadGXN(int id)
    {
        foreach (var gxn in allGXN)
        {
            if (gxn.Id == id)
            {
                return gxn.TenGoi;
            }
        }
        return null;
    }
    private String gioitinh(bool a)
    {
        if (a)
        {
            return "Nam";
        }
        else
        {
            return "Nữ";
        }
    }
    private void LoadBSInfo(int id)
    {
        var selectedPackage = listgxn.FirstOrDefault(p => p.Id == id);
        var g = allGXN.FirstOrDefault(p => p.Id == id);
        if (selectedPackage != null)
        {
            selectedPackage.IsSelected = !selectedPackage.IsSelected;

            if (selectedPackage.IsSelected == true)
            {
                gxndachon.Add(g);
                tongtien += selectedPackage.Gia;
            }
            else
            {
                gxndachon.Remove(g);
                tongtien -= selectedPackage.Gia;
            }
        }
    }
    public async Task keolen()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom");
    }
    void GenerateTimeList()
    {
        timeList.Clear(); // Xóa danh sách thời gian cũ trước khi tạo mới

        TimeSpan startTime;
        if (Input.Ngaydat.Date == DateTime.Today)
        {
            // Nếu ngày lấy máu là hôm nay, bắt đầu từ thời gian hiện tại cộng thêm 2 giờ
            startTime = TimeSpan.FromHours(DateTime.Now.Hour + 2);
        }
        else
        {
            // Ngày lấy máu không phải hôm nay, bắt đầu từ 5:30 AM
            startTime = TimeSpan.FromHours(5.5);
        }

        TimeSpan endTime = TimeSpan.FromHours(20.8); // 21:00
        TimeSpan time = startTime;
        while (time <= endTime)
        {
            string startTimeString = time.ToString(@"hh\:mm");
            string endTimeString = time.Add(TimeSpan.FromMinutes(15)).ToString(@"hh\:mm");
            string timeRange = $"{startTimeString} - {endTimeString}";
            timeList.Add(timeRange);
            time = time.Add(TimeSpan.FromMinutes(15)); // Tăng thêm 15 phút
        }
    }
}
<script>
    window.scrollToBottom = () => {
        window.scrollTo(0, 0);
    }
</script>