@page "/testquetqr"
@using System.Text

@rendermode InteractiveAuto
<button @onclick="ShowModal">Open QR Scanner</button>
@if (isModalVisible)
{
    <div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Scan QR Code</h5>
                </div>
                <div class="modal-body">
                    <div style="width: 100%" id="reader"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        function onScanSuccess(decodedText, decodedResult) {
            console.log(`Scan result: ${decodedText}`, decodedResult);
            html5QrcodeScanner.clear();
            DotNet.invokeMethodAsync('duanxetnghiem.Client', 'UpdateQr', "-1");
            DotNet.invokeMethodAsync('duanxetnghiem.Client', 'UpdateQr', decodedText);
        }

        var html5QrcodeScanner = new Html5QrcodeScanner(
            "reader", { fps: 10, qrbox: 250, showZoomSliderIfSupported: true, defaultZoomValueIfSupported: 4 });
        html5QrcodeScanner.render(onScanSuccess);
    </script>
}

<h1>QR Code Content: @qrContent</h1>

@code {
    private static Duphong _instance;
    private string qrContent;
    private bool isModalVisible = false;

    void ShowModal()
    {
        UpdateQr("-1");
        isModalVisible = true;
    }

    void CloseModal()
    {
        isModalVisible = false;
    }

    protected override void OnInitialized()
    {
        _instance = this;
    }

    [JSInvokable]
    public static void UpdateQr(string decodedText)
    {
        if (decodedText!="-1"&&_instance != null)
        {
            _instance.qrContent = decodedText;
            _instance.isModalVisible = false;
            _instance.InvokeAsync(_instance.StateHasChanged);
        }
    }

}
